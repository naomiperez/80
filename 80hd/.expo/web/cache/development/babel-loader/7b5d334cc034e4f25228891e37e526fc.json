{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { isObject } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentReference from \"./FirestoreDocumentReference\";\nimport FirestoreDocumentSnapshot from \"./FirestoreDocumentSnapshot\";\nimport { parseSetOptions, parseUpdateArgs } from \"./utils\";\nimport { buildNativeMap } from \"./utils/serialize\";\n\nvar FirestoreTransaction = function () {\n  function FirestoreTransaction(firestore, meta) {\n    _classCallCheck(this, FirestoreTransaction);\n\n    this._firestore = firestore;\n    this._meta = meta;\n  }\n\n  _createClass(FirestoreTransaction, [{\n    key: \"_prepare\",\n    value: function _prepare() {\n      this._calledGetCount = 0;\n      this._commandBuffer = [];\n      this._pendingResult = undefined;\n    }\n  }, {\n    key: \"get\",\n    value: function get(documentRef) {\n      var _this = this;\n\n      if (!(documentRef instanceof FirestoreDocumentReference)) {\n        throw new Error(\"firebase.firestore().runTransaction() Transaction.get(*) 'documentRef' expected a DocumentReference.\");\n      }\n\n      this._calledGetCount++;\n      return this._firestore.native.transactionGetDocument(this._meta.id, documentRef.path).then(function (data) {\n        return new FirestoreDocumentSnapshot(_this._firestore, data);\n      });\n    }\n  }, {\n    key: \"set\",\n    value: function set(documentRef, data, options) {\n      if (!(documentRef instanceof FirestoreDocumentReference)) {\n        throw new Error(\"firebase.firestore().runTransaction() Transaction.set(*) 'documentRef' expected a DocumentReference.\");\n      }\n\n      if (!isObject(data)) {\n        throw new Error(\"firebase.firestore().runTransaction() Transaction.set(_, *) 'data' must be an object..\");\n      }\n\n      var setOptions;\n\n      try {\n        setOptions = parseSetOptions(options);\n      } catch (e) {\n        throw new Error(\"firebase.firestore().runTransaction() Transaction.set(_, _, *) \" + e.message + \".\");\n      }\n\n      this._commandBuffer.push({\n        type: 'SET',\n        path: documentRef.path,\n        data: buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties),\n        options: setOptions\n      });\n\n      return this;\n    }\n  }, {\n    key: \"update\",\n    value: function update(documentRef) {\n      if (!(documentRef instanceof FirestoreDocumentReference)) {\n        throw new Error(\"firebase.firestore().runTransaction() Transaction.update(*) 'documentRef' expected a DocumentReference.\");\n      }\n\n      var data;\n\n      try {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        data = parseUpdateArgs(args);\n      } catch (e) {\n        throw new Error(\"firebase.firestore().runTransaction() Transaction.update(_, *) \" + e.message);\n      }\n\n      this._commandBuffer.push({\n        type: 'UPDATE',\n        path: documentRef.path,\n        data: buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties)\n      });\n\n      return this;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(documentRef) {\n      if (!(documentRef instanceof FirestoreDocumentReference)) {\n        throw new Error(\"firebase.firestore().runTransaction() Transaction.delete(*) 'documentRef' expected a DocumentReference.\");\n      }\n\n      this._commandBuffer.push({\n        type: 'DELETE',\n        path: documentRef.path\n      });\n\n      return this;\n    }\n  }]);\n\n  return FirestoreTransaction;\n}();\n\nexport { FirestoreTransaction as default };","map":{"version":3,"sources":["/Users/naomiperez/Documents/GitHub/80/client/80hd/node_modules/@react-native-firebase/firestore/lib/FirestoreTransaction.js"],"names":["isObject","FirestoreDocumentReference","FirestoreDocumentSnapshot","parseSetOptions","parseUpdateArgs","buildNativeMap","FirestoreTransaction","firestore","meta","_firestore","_meta","_calledGetCount","_commandBuffer","_pendingResult","undefined","documentRef","Error","native","transactionGetDocument","id","path","then","data","options","setOptions","e","message","push","type","_settings","ignoreUndefinedProperties","args"],"mappings":";;AAiBA,SAASA,QAAT,QAAyB,uCAAzB;AACA,OAAOC,0BAAP;AACA,OAAOC,yBAAP;AACA,SAASC,eAAT,EAA0BC,eAA1B;AACA,SAASC,cAAT;;IAEqBC,oB;AACnB,gCAAYC,SAAZ,EAAuBC,IAAvB,EAA6B;AAAA;;AAC3B,SAAKC,UAAL,GAAkBF,SAAlB;AACA,SAAKG,KAAL,GAAaF,IAAb;AACD;;;;WAQD,oBAAW;AACT,WAAKG,eAAL,GAAuB,CAAvB;AACA,WAAKC,cAAL,GAAsB,EAAtB;AACA,WAAKC,cAAL,GAAsBC,SAAtB;AACD;;;WAKD,aAAIC,WAAJ,EAAiB;AAAA;;AACf,UAAI,EAAEA,WAAW,YAAYd,0BAAzB,CAAJ,EAA0D;AACxD,cAAM,IAAIe,KAAJ,CACJ,sGADI,CAAN;AAGD;;AAED,WAAKL,eAAL;AACA,aAAO,KAAKF,UAAL,CAAgBQ,MAAhB,CACJC,sBADI,CACmB,KAAKR,KAAL,CAAWS,EAD9B,EACkCJ,WAAW,CAACK,IAD9C,EAEJC,IAFI,CAEC,UAAAC,IAAI;AAAA,eAAI,IAAIpB,yBAAJ,CAA8B,KAAI,CAACO,UAAnC,EAA+Ca,IAA/C,CAAJ;AAAA,OAFL,CAAP;AAGD;;;WAOD,aAAIP,WAAJ,EAAiBO,IAAjB,EAAuBC,OAAvB,EAAgC;AAC9B,UAAI,EAAER,WAAW,YAAYd,0BAAzB,CAAJ,EAA0D;AACxD,cAAM,IAAIe,KAAJ,CACJ,sGADI,CAAN;AAGD;;AAED,UAAI,CAAChB,QAAQ,CAACsB,IAAD,CAAb,EAAqB;AACnB,cAAM,IAAIN,KAAJ,CACJ,wFADI,CAAN;AAGD;;AAED,UAAIQ,UAAJ;;AACA,UAAI;AACFA,QAAAA,UAAU,GAAGrB,eAAe,CAACoB,OAAD,CAA5B;AACD,OAFD,CAEE,OAAOE,CAAP,EAAU;AACV,cAAM,IAAIT,KAAJ,qEAC8DS,CAAC,CAACC,OADhE,OAAN;AAGD;;AAED,WAAKd,cAAL,CAAoBe,IAApB,CAAyB;AACvBC,QAAAA,IAAI,EAAE,KADiB;AAEvBR,QAAAA,IAAI,EAAEL,WAAW,CAACK,IAFK;AAGvBE,QAAAA,IAAI,EAAEjB,cAAc,CAACiB,IAAD,EAAO,KAAKb,UAAL,CAAgBoB,SAAhB,CAA0BC,yBAAjC,CAHG;AAIvBP,QAAAA,OAAO,EAAEC;AAJc,OAAzB;;AAOA,aAAO,IAAP;AACD;;;WAED,gBAAOT,WAAP,EAA6B;AAC3B,UAAI,EAAEA,WAAW,YAAYd,0BAAzB,CAAJ,EAA0D;AACxD,cAAM,IAAIe,KAAJ,CACJ,yGADI,CAAN;AAGD;;AAED,UAAIM,IAAJ;;AACA,UAAI;AAAA,0CARiBS,IAQjB;AARiBA,UAAAA,IAQjB;AAAA;;AACFT,QAAAA,IAAI,GAAGlB,eAAe,CAAC2B,IAAD,CAAtB;AACD,OAFD,CAEE,OAAON,CAAP,EAAU;AACV,cAAM,IAAIT,KAAJ,qEAC8DS,CAAC,CAACC,OADhE,CAAN;AAGD;;AAED,WAAKd,cAAL,CAAoBe,IAApB,CAAyB;AACvBC,QAAAA,IAAI,EAAE,QADiB;AAEvBR,QAAAA,IAAI,EAAEL,WAAW,CAACK,IAFK;AAGvBE,QAAAA,IAAI,EAAEjB,cAAc,CAACiB,IAAD,EAAO,KAAKb,UAAL,CAAgBoB,SAAhB,CAA0BC,yBAAjC;AAHG,OAAzB;;AAMA,aAAO,IAAP;AACD;;;WAED,iBAAOf,WAAP,EAAoB;AAClB,UAAI,EAAEA,WAAW,YAAYd,0BAAzB,CAAJ,EAA0D;AACxD,cAAM,IAAIe,KAAJ,CACJ,yGADI,CAAN;AAGD;;AAED,WAAKJ,cAAL,CAAoBe,IAApB,CAAyB;AACvBC,QAAAA,IAAI,EAAE,QADiB;AAEvBR,QAAAA,IAAI,EAAEL,WAAW,CAACK;AAFK,OAAzB;;AAKA,aAAO,IAAP;AACD;;;;;;SA7GkBd,oB","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isObject } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentReference from './FirestoreDocumentReference';\nimport FirestoreDocumentSnapshot from './FirestoreDocumentSnapshot';\nimport { parseSetOptions, parseUpdateArgs } from './utils';\nimport { buildNativeMap } from './utils/serialize';\n\nexport default class FirestoreTransaction {\n  constructor(firestore, meta) {\n    this._firestore = firestore;\n    this._meta = meta;\n  }\n\n  /**\n   * Clears the command buffer and any pending result in prep for\n   * the next transaction iteration attempt.\n   *\n   * @private\n   */\n  _prepare() {\n    this._calledGetCount = 0;\n    this._commandBuffer = [];\n    this._pendingResult = undefined;\n  }\n\n  /**\n   * Reads the document referenced by the provided DocumentReference.\n   */\n  get(documentRef) {\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore().runTransaction() Transaction.get(*) 'documentRef' expected a DocumentReference.\",\n      );\n    }\n\n    this._calledGetCount++;\n    return this._firestore.native\n      .transactionGetDocument(this._meta.id, documentRef.path)\n      .then(data => new FirestoreDocumentSnapshot(this._firestore, data));\n  }\n\n  /**\n   * Writes to the document referred to by the provided DocumentReference.\n   * If the document does not exist yet, it will be created. If you pass options,\n   * the provided data can be merged into the existing document.\n   */\n  set(documentRef, data, options) {\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore().runTransaction() Transaction.set(*) 'documentRef' expected a DocumentReference.\",\n      );\n    }\n\n    if (!isObject(data)) {\n      throw new Error(\n        \"firebase.firestore().runTransaction() Transaction.set(_, *) 'data' must be an object..\",\n      );\n    }\n\n    let setOptions;\n    try {\n      setOptions = parseSetOptions(options);\n    } catch (e) {\n      throw new Error(\n        `firebase.firestore().runTransaction() Transaction.set(_, _, *) ${e.message}.`,\n      );\n    }\n\n    this._commandBuffer.push({\n      type: 'SET',\n      path: documentRef.path,\n      data: buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties),\n      options: setOptions,\n    });\n\n    return this;\n  }\n\n  update(documentRef, ...args) {\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore().runTransaction() Transaction.update(*) 'documentRef' expected a DocumentReference.\",\n      );\n    }\n\n    let data;\n    try {\n      data = parseUpdateArgs(args);\n    } catch (e) {\n      throw new Error(\n        `firebase.firestore().runTransaction() Transaction.update(_, *) ${e.message}`,\n      );\n    }\n\n    this._commandBuffer.push({\n      type: 'UPDATE',\n      path: documentRef.path,\n      data: buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties),\n    });\n\n    return this;\n  }\n\n  delete(documentRef) {\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore().runTransaction() Transaction.delete(*) 'documentRef' expected a DocumentReference.\",\n      );\n    }\n\n    this._commandBuffer.push({\n      type: 'DELETE',\n      path: documentRef.path,\n    });\n\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}