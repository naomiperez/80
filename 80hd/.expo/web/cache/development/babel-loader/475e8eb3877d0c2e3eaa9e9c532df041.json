{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nvar RNFBAppModule = NativeModules.RNFBAppModule;\n\nvar RNFBNativeEventEmitter = function (_NativeEventEmitter) {\n  _inherits(RNFBNativeEventEmitter, _NativeEventEmitter);\n\n  var _super = _createSuper(RNFBNativeEventEmitter);\n\n  function RNFBNativeEventEmitter() {\n    var _this;\n\n    _classCallCheck(this, RNFBNativeEventEmitter);\n\n    _this = _super.call(this, RNFBAppModule);\n    _this.ready = false;\n    return _this;\n  }\n\n  _createClass(RNFBNativeEventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(eventType, listener, context) {\n      if (!this.ready) {\n        RNFBAppModule.eventsNotifyReady(true);\n        this.ready = true;\n      }\n\n      RNFBAppModule.eventsAddListener(eventType);\n      return _get(_getPrototypeOf(RNFBNativeEventEmitter.prototype), \"addListener\", this).call(this, \"rnfb_\" + eventType, listener, context);\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventType) {\n      RNFBAppModule.eventsRemoveListener(eventType, true);\n\n      _get(_getPrototypeOf(RNFBNativeEventEmitter.prototype), \"removeAllListeners\", this).call(this, \"rnfb_\" + eventType);\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      RNFBAppModule.eventsRemoveListener(subscription.eventType.replace('rnfb_'), false);\n\n      _get(_getPrototypeOf(RNFBNativeEventEmitter.prototype), \"removeSubscription\", this).call(this, subscription);\n    }\n  }]);\n\n  return RNFBNativeEventEmitter;\n}(NativeEventEmitter);\n\nexport default new RNFBNativeEventEmitter();","map":{"version":3,"sources":["/Users/naomiperez/Documents/GitHub/80/client/80hd/node_modules/@react-native-firebase/app/lib/internal/RNFBNativeEventEmitter.js"],"names":["RNFBAppModule","NativeModules","RNFBNativeEventEmitter","ready","eventType","listener","context","eventsNotifyReady","eventsAddListener","eventsRemoveListener","subscription","replace","NativeEventEmitter"],"mappings":";;;;;;;;;;;;;AAmBA,IAAQA,aAAR,GAA0BC,aAA1B,CAAQD,aAAR;;IAEME,sB;;;;;AACJ,oCAAc;AAAA;;AAAA;;AACZ,8BAAMF,aAAN;AACA,UAAKG,KAAL,GAAa,KAAb;AAFY;AAGb;;;;WAED,qBAAYC,SAAZ,EAAuBC,QAAvB,EAAiCC,OAAjC,EAA0C;AACxC,UAAI,CAAC,KAAKH,KAAV,EAAiB;AACfH,QAAAA,aAAa,CAACO,iBAAd,CAAgC,IAAhC;AACA,aAAKJ,KAAL,GAAa,IAAb;AACD;;AACDH,MAAAA,aAAa,CAACQ,iBAAd,CAAgCJ,SAAhC;AACA,+GAAiCA,SAAjC,EAA8CC,QAA9C,EAAwDC,OAAxD;AACD;;;WAED,4BAAmBF,SAAnB,EAA8B;AAC5BJ,MAAAA,aAAa,CAACS,oBAAd,CAAmCL,SAAnC,EAA8C,IAA9C;;AACA,+GAAiCA,SAAjC;AACD;;;WAED,4BAAmBM,YAAnB,EAAiC;AAC/BV,MAAAA,aAAa,CAACS,oBAAd,CAAmCC,YAAY,CAACN,SAAb,CAAuBO,OAAvB,CAA+B,OAA/B,CAAnC,EAA4E,KAA5E;;AACA,qGAAyBD,YAAzB;AACD;;;;EAvBkCE,kB;;AA0BrC,eAAe,IAAIV,sBAAJ,EAAf","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { NativeEventEmitter, NativeModules } from 'react-native';\n\nconst { RNFBAppModule } = NativeModules;\n\nclass RNFBNativeEventEmitter extends NativeEventEmitter {\n  constructor() {\n    super(RNFBAppModule);\n    this.ready = false;\n  }\n\n  addListener(eventType, listener, context) {\n    if (!this.ready) {\n      RNFBAppModule.eventsNotifyReady(true);\n      this.ready = true;\n    }\n    RNFBAppModule.eventsAddListener(eventType);\n    return super.addListener(`rnfb_${eventType}`, listener, context);\n  }\n\n  removeAllListeners(eventType) {\n    RNFBAppModule.eventsRemoveListener(eventType, true);\n    super.removeAllListeners(`rnfb_${eventType}`);\n  }\n\n  removeSubscription(subscription) {\n    RNFBAppModule.eventsRemoveListener(subscription.eventType.replace('rnfb_'), false);\n    super.removeSubscription(subscription);\n  }\n}\n\nexport default new RNFBNativeEventEmitter();\n"]},"metadata":{},"sourceType":"module"}