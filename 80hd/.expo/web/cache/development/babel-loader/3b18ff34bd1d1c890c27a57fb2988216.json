{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/naomiperez/Documents/GitHub/80/80hd/src/containers/MoodSelector/Mood.js\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport PropTypes from 'prop-types';\nimport { mood1, mood2, mood3, mood4, mood5, mood6, mood7 } from \"../../assets/images\";\nimport styles from \"./styles\";\nvar images = new Array(mood1, mood2, mood3, mood4, mood5, mood6, mood7);\nexport function MoodSelectorFrag(props) {\n  var _this = this;\n\n  var _useState = useState(props.mood),\n      _useState2 = _slicedToArray(_useState, 2),\n      pressed = _useState2[0],\n      setPressed = _useState2[1];\n\n  var mood = props.mood,\n      date = props.date;\n  {\n    console.log('Rerendering MoodFrag?');\n  }\n\n  function handleChange(index) {\n    props.logMood(index);\n    setPressed(index);\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 4\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, images.map(function (img, index) {\n    return React.createElement(React.Fragment, {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 8\n      }\n    }, React.createElement(TouchableOpacity, {\n      mood: mood,\n      onPress: function onPress() {\n        return handleChange(index);\n      },\n      style: [styles.button, pressed == index ? {\n        backgroundColor: '#ccc7b8'\n      } : {}],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }, React.createElement(Image, {\n      source: img,\n      style: styles.icon,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 10\n      }\n    })), React.createElement(View, {\n      style: styles.buttonSpace,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }));\n  }))));\n}\n\nfunction moodPropsChanged(prevMood, nextMood) {\n  console.log('Prev date: ' + prevMood.date + ' Next date: ' + nextMood.date);\n  return prevMood.date == nextMood.date;\n}\n\nMoodSelectorFrag.propTypes = {\n  mood: PropTypes.number,\n  date: PropTypes.instanceOf(Date),\n  logMood: PropTypes.func\n};\nvar MoodSelector = React.memo(MoodSelectorFrag, moodPropsChanged);\nexport default MoodSelector;","map":{"version":3,"sources":["/Users/naomiperez/Documents/GitHub/80/80hd/src/containers/MoodSelector/Mood.js"],"names":["React","useState","PropTypes","mood1","mood2","mood3","mood4","mood5","mood6","mood7","styles","images","Array","MoodSelectorFrag","props","mood","pressed","setPressed","date","console","log","handleChange","index","logMood","map","img","button","backgroundColor","icon","buttonSpace","moodPropsChanged","prevMood","nextMood","propTypes","number","instanceOf","Date","func","MoodSelector","memo"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SACCC,KADD,EAECC,KAFD,EAGCC,KAHD,EAICC,KAJD,EAKCC,KALD,EAMCC,KAND,EAOCC,KAPD;AASA,OAAOC,MAAP;AAKA,IAAMC,MAAM,GAAG,IAAIC,KAAJ,CAAUT,KAAV,EAAiBC,KAAjB,EAAwBC,KAAxB,EAA+BC,KAA/B,EAAsCC,KAAtC,EAA6CC,KAA7C,EAAoDC,KAApD,CAAf;AAEA,OAAO,SAASI,gBAAT,CAA0BC,KAA1B,EAAiC;AAAA;;AACvC,kBAA8Bb,QAAQ,CAACa,KAAK,CAACC,IAAP,CAAtC;AAAA;AAAA,MAAOC,OAAP;AAAA,MAAgBC,UAAhB;;AACA,MAAMF,IAAN,GAAqBD,KAArB,CAAMC,IAAN;AAAA,MAAYG,IAAZ,GAAqBJ,KAArB,CAAYI,IAAZ;AAEA;AACCC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA;;AAED,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC5BR,IAAAA,KAAK,CAACS,OAAN,CAAcD,KAAd;AACAL,IAAAA,UAAU,CAACK,KAAD,CAAV;AACA;;AAED,SACC,0CACC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEX,MAAM,CAACa,GAAP,CAAW,UAACC,GAAD,EAAMH,KAAN,EAAgB;AAC3B,WACC,oBAAC,KAAD,CAAO,QAAP;AAAgB,MAAA,GAAG,EAAEA,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,gBAAD;AACC,MAAA,IAAI,EAAEP,IADP;AAEC,MAAA,OAAO,EAAE;AAAA,eAAMM,YAAY,CAACC,KAAD,CAAlB;AAAA,OAFV;AAGC,MAAA,KAAK,EAAE,CACNZ,MAAM,CAACgB,MADD,EAENV,OAAO,IAAIM,KAAX,GAAmB;AAAEK,QAAAA,eAAe,EAAE;AAAnB,OAAnB,GAAoD,EAF9C,CAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOC,oBAAC,KAAD;AAAO,MAAA,MAAM,EAAEF,GAAf;AAAoB,MAAA,KAAK,EAAEf,MAAM,CAACkB,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPD,CADD,EAUC,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAElB,MAAM,CAACmB,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVD,CADD;AAcA,GAfA,CADF,CADD,CADD,CADD;AAwBA;;AAED,SAASC,gBAAT,CAA0BC,QAA1B,EAAoCC,QAApC,EAA8C;AAC7Cb,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBW,QAAQ,CAACb,IAAzB,GAAgC,cAAhC,GAAiDc,QAAQ,CAACd,IAAtE;AACA,SAAOa,QAAQ,CAACb,IAAT,IAAiBc,QAAQ,CAACd,IAAjC;AACA;;AAEDL,gBAAgB,CAACoB,SAAjB,GAA6B;AAC5BlB,EAAAA,IAAI,EAAEb,SAAS,CAACgC,MADY;AAE5BhB,EAAAA,IAAI,EAAEhB,SAAS,CAACiC,UAAV,CAAqBC,IAArB,CAFsB;AAG5Bb,EAAAA,OAAO,EAAErB,SAAS,CAACmC;AAHS,CAA7B;AAMA,IAAMC,YAAY,GAAGtC,KAAK,CAACuC,IAAN,CAAW1B,gBAAX,EAA6BiB,gBAA7B,CAArB;AACA,eAAeQ,YAAf","sourcesContent":["import React, { useState } from 'react'\nimport { View, Text, Image, TouchableOpacity } from 'react-native'\nimport PropTypes from 'prop-types'\nimport {\n\tmood1,\n\tmood2,\n\tmood3,\n\tmood4,\n\tmood5,\n\tmood6,\n\tmood7,\n} from '../../assets/images'\nimport styles from './styles'\n\n/* I may have to implement something where I retreive that day's Mood info to display when user clicks on it */\n\n// Mood Card displayed on Home page where user can log daily mood\nconst images = new Array(mood1, mood2, mood3, mood4, mood5, mood6, mood7)\n\nexport function MoodSelectorFrag(props) {\n\tconst [pressed, setPressed] = useState(props.mood)\n\tlet { mood, date } = props\n\n\t{\n\t\tconsole.log('Rerendering MoodFrag?')\n\t}\n\n\tfunction handleChange(index) {\n\t\tprops.logMood(index)\n\t\tsetPressed(index)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<View>\n\t\t\t\t<Text>\n\t\t\t\t\t{images.map((img, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<React.Fragment key={index}>\n\t\t\t\t\t\t\t\t<TouchableOpacity\n\t\t\t\t\t\t\t\t\tmood={mood}\n\t\t\t\t\t\t\t\t\tonPress={() => handleChange(index)}\n\t\t\t\t\t\t\t\t\tstyle={[\n\t\t\t\t\t\t\t\t\t\tstyles.button,\n\t\t\t\t\t\t\t\t\t\tpressed == index ? { backgroundColor: '#ccc7b8' } : {},\n\t\t\t\t\t\t\t\t\t]}>\n\t\t\t\t\t\t\t\t\t<Image source={img} style={styles.icon}></Image>\n\t\t\t\t\t\t\t\t</TouchableOpacity>\n\t\t\t\t\t\t\t\t<View style={styles.buttonSpace}></View>\n\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</Text>\n\t\t\t</View>\n\t\t</>\n\t)\n}\n\nfunction moodPropsChanged(prevMood, nextMood) {\n\tconsole.log('Prev date: ' + prevMood.date + ' Next date: ' + nextMood.date)\n\treturn prevMood.date == nextMood.date\n}\n\nMoodSelectorFrag.propTypes = {\n\tmood: PropTypes.number,\n\tdate: PropTypes.instanceOf(Date),\n\tlogMood: PropTypes.func,\n}\n\nconst MoodSelector = React.memo(MoodSelectorFrag, moodPropsChanged)\nexport default MoodSelector\n"]},"metadata":{},"sourceType":"module"}