{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/naomiperez/Documents/GitHub/80/80hd/src/containers/HomeScreen/Home.js\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport PropTypes from 'prop-types';\nimport Calendar from \"../../components/Calendar/Calendar\";\nimport LoggerView from \"../../components/LoggerCard/LoggerView\";\nimport MoodSelector from \"../MoodSelector/Mood\";\nimport SleepSelector from \"../SleepSelector/Sleep\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport { CurrentUserProvider, useCurrentUser } from \"../../CurrentUserContext\";\nimport styles from \"./styles\";\nimport { formatLogData, getTodayLog } from \"./HandleData\";\n\nfunction Home(props) {\n  var today = new Date();\n  var moodInit = 10;\n\n  var _useState = useState(moodInit),\n      _useState2 = _slicedToArray(_useState, 2),\n      mood = _useState2[0],\n      setMood = _useState2[1];\n\n  var _useState3 = useState(today),\n      _useState4 = _slicedToArray(_useState3, 2),\n      date = _useState4[0],\n      setDate = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      sleepHours = _useState6[0],\n      setSleepHours = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      logsExpanded = _useState8[0],\n      setlogsExpanded = _useState8[1];\n\n  var _useCurrentUser = useCurrentUser(),\n      currentUser = _useCurrentUser.currentUser,\n      fetchCurrentUser = _useCurrentUser.fetchCurrentUser;\n\n  var userRef = currentUser;\n  React.useEffect(function () {\n    fetchCurrentUser();\n  }, []);\n\n  function logMood(mood) {\n    console.log(\"Mood: \" + mood + \" Date: \" + date);\n    setMood(mood);\n    var data = formatLogData(date, mood, userRef, props.user);\n    getTodayLog(date).then(function (todayRef) {\n      if (todayRef) {\n        console.log('todayRef: ' + todayRef);\n        todayRef.ref.update(data).then(function () {\n          console.log('Document successfully updated');\n        }).catch(function (error) {\n          console.error('Error updating document: ', error);\n        });\n      } else {\n        firebase.firestore().collection('moodLog').doc().set(data);\n      }\n    });\n  }\n\n  function logDate(obj) {\n    console.log('here!!!');\n    setDate(obj.date);\n    setlogsExpanded(false);\n  }\n\n  function logSleep(obj) {\n    setSleepHours(obj);\n    console.log('Sleep hours in Home component: ' + obj);\n  }\n\n  return React.createElement(CurrentUserProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 3\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 4\n    }\n  }, React.createElement(Calendar, {\n    date: date,\n    logDate: logDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }), React.createElement(LoggerView, {\n    selector: React.createElement(MoodSelector, {\n      mood: mood,\n      date: date,\n      logMood: logMood,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 16\n      }\n    }),\n    cardTitle: \"mood\",\n    expandHeight: 60,\n    loggerExpanded: logsExpanded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }), React.createElement(LoggerView, {\n    selector: React.createElement(SleepSelector, {\n      hours: sleepHours,\n      logSleep: logSleep,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 16\n      }\n    }),\n    cardTitle: \"sleep\",\n    expandHeight: 80,\n    loggerExpanded: logsExpanded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }), React.createElement(View, {\n    style: styles.containerCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 6\n    }\n  }, \"add factors\", React.createElement(Text, {\n    style: {\n      fontWeight: '400',\n      fontSize: 30\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, \"+\")))));\n}\n\nHome.propTypes = {\n  user: PropTypes.object\n};\nexport default Home;","map":{"version":3,"sources":["/Users/naomiperez/Documents/GitHub/80/80hd/src/containers/HomeScreen/Home.js"],"names":["React","useState","PropTypes","Calendar","LoggerView","MoodSelector","SleepSelector","firebase","CurrentUserProvider","useCurrentUser","styles","formatLogData","getTodayLog","Home","props","today","Date","moodInit","mood","setMood","date","setDate","sleepHours","setSleepHours","logsExpanded","setlogsExpanded","currentUser","fetchCurrentUser","userRef","useEffect","logMood","console","log","data","user","then","todayRef","ref","update","catch","error","firestore","collection","doc","set","logDate","obj","logSleep","container","containerCard","text","fontWeight","fontSize","propTypes","object"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { View, Text } from 'react-native'\nimport PropTypes from 'prop-types'\nimport Calendar from '../../components/Calendar/Calendar'\nimport LoggerView from '../../components/LoggerCard/LoggerView'\nimport MoodSelector from '../MoodSelector/Mood'\nimport SleepSelector from '../SleepSelector/Sleep'\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\nimport { CurrentUserProvider, useCurrentUser } from '../../CurrentUserContext'\nimport styles from './styles'\nimport { formatLogData, getTodayLog } from './HandleData'\n\nfunction Home(props) {\n\t// Use state variables to store date and mood\n\tconst today = new Date()\n\tconst moodInit = 10\n\tconst [mood, setMood] = useState(moodInit)\n\tconst [date, setDate] = useState(today)\n\tconst [sleepHours, setSleepHours] = useState(0)\n\tconst [logsExpanded, setlogsExpanded] = useState(false)\n\tconst { currentUser, fetchCurrentUser } = useCurrentUser()\n\n\tconst userRef = currentUser\n\n\tReact.useEffect(() => {\n\t\tfetchCurrentUser()\n\t}, [])\n\n\t/********************/\n\tfunction logMood(mood) {\n\t\tconsole.log(`Mood: ${mood} Date: ${date}`)\n\n\t\tsetMood(mood)\n\n\t\tlet data = formatLogData(date, mood, userRef, props.user)\n\t\t/* If user already has logged data for today, then update() \n            if not, then add() new document for today\n        */\n\t\tgetTodayLog(date).then((todayRef) => {\n\t\t\tif (todayRef) {\n\t\t\t\tconsole.log('todayRef: ' + todayRef)\n\t\t\t\ttodayRef.ref\n\t\t\t\t\t.update(data)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tconsole.log('Document successfully updated')\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t// The document probably doesn't exist.\n\t\t\t\t\t\tconsole.error('Error updating document: ', error)\n\t\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// New doc for 'today''s date\n\t\t\t\tfirebase.firestore().collection('moodLog').doc().set(data)\n\t\t\t}\n\t\t})\n\t}\n\n\tfunction logDate(obj) {\n\t\tconsole.log('here!!!')\n\t\t/* Date is only formatted once logMood is called */\n\t\tsetDate(obj.date)\n\t\tsetlogsExpanded(false)\n\t}\n\n\tfunction logSleep(obj) {\n\t\tsetSleepHours(obj)\n\t\tconsole.log('Sleep hours in Home component: ' + obj)\n\t}\n\n\treturn (\n\t\t<CurrentUserProvider>\n\t\t\t<View style={styles.container}>\n\t\t\t\t<Calendar date={date} logDate={logDate} />\n\t\t\t\t<LoggerView\n\t\t\t\t\tselector={<MoodSelector mood={mood} date={date} logMood={logMood} />}\n\t\t\t\t\tcardTitle='mood'\n\t\t\t\t\texpandHeight={60}\n\t\t\t\t\tloggerExpanded={logsExpanded}\n\t\t\t\t/>\n\t\t\t\t<LoggerView\n\t\t\t\t\tselector={<SleepSelector hours={sleepHours} logSleep={logSleep} />}\n\t\t\t\t\tcardTitle='sleep'\n\t\t\t\t\texpandHeight={80}\n\t\t\t\t\tloggerExpanded={logsExpanded}\n\t\t\t\t/>\n\t\t\t\t<View style={styles.containerCard}>\n\t\t\t\t\t<Text style={styles.text}>\n\t\t\t\t\t\tadd factors\n\t\t\t\t\t\t<Text style={{ fontWeight: '400', fontSize: 30 }}>+</Text>\n\t\t\t\t\t</Text>\n\t\t\t\t</View>\n\t\t\t</View>\n\t\t</CurrentUserProvider>\n\t)\n}\n\nHome.propTypes = {\n\tuser: PropTypes.object,\n}\n\nexport default Home\n"]},"metadata":{},"sourceType":"module"}