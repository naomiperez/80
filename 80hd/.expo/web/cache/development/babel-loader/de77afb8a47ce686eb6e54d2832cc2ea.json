{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/naomiperez/Documents/GitHub/80/client/80hd/src/containers/HomeScreen/Home.js\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Calendar from \"../../components/calendar/Calendar\";\nimport LoggerView from \"../../components/LoggerCard/LoggerView\";\nimport MoodSelector from \"../MoodSelector/Mood\";\nimport SleepSelector from \"../SleepSelector/Sleep\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport { CurrentUserProvider, useCurrentUser } from \"../../CurrentUserContext\";\nimport styles from \"./styles\";\nimport { formatLogData, formatDate } from \"./HandleData\";\nvar today = new Date();\nvar moodInit = 10;\n\nfunction Home(props) {\n  var _useState = useState(moodInit),\n      _useState2 = _slicedToArray(_useState, 2),\n      mood = _useState2[0],\n      setMood = _useState2[1];\n\n  var _useState3 = useState(today),\n      _useState4 = _slicedToArray(_useState3, 2),\n      date = _useState4[0],\n      setDate = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      sleepHours = _useState6[0],\n      setSleepHours = _useState6[1];\n\n  var _useCurrentUser = useCurrentUser(),\n      currentUser = _useCurrentUser.currentUser,\n      fetchCurrentUser = _useCurrentUser.fetchCurrentUser;\n\n  var userRef = currentUser;\n  React.useEffect(function () {\n    fetchCurrentUser();\n  }, []);\n\n  function logMood(mood) {\n    console.log(\"Mood: \" + mood + \" Date: \" + date);\n    setMood(mood);\n    var data = formatLogData(date, mood, userRef, props.user);\n    getTodayLog(date).then(function (todayRef) {\n      if (todayRef) {\n        console.log('todayRef: ' + todayRef);\n        todayRef.ref.update(data).then(function () {\n          console.log('Document successfully updated');\n        }).catch(function (error) {\n          console.error('Error updating document: ', error);\n        });\n      } else {\n        firebase.firestore().collection('moodLog').doc().set(data);\n      }\n    });\n  }\n\n  function logDate(obj) {\n    setDate(obj.date);\n  }\n\n  function logSleep(obj) {\n    setSleepHours(obj);\n    console.log('Sleep hours in Home component: ' + obj);\n  }\n\n  return React.createElement(CurrentUserProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, React.createElement(Calendar, {\n    date: date,\n    logDate: logDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }), React.createElement(LoggerView, {\n    selector: React.createElement(MoodSelector, {\n      mood: mood,\n      logMood: logMood,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }\n    }),\n    cardTitle: \"mood\",\n    expandHeight: 60,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }), React.createElement(LoggerView, {\n    selector: React.createElement(SleepSelector, {\n      hours: sleepHours,\n      logSleep: logSleep,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }\n    }),\n    cardTitle: \"sleep\",\n    expandHeight: 80,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/naomiperez/Documents/GitHub/80/client/80hd/src/containers/HomeScreen/Home.js"],"names":["React","useState","Calendar","LoggerView","MoodSelector","SleepSelector","firebase","CurrentUserProvider","useCurrentUser","styles","formatLogData","formatDate","today","Date","moodInit","Home","props","mood","setMood","date","setDate","sleepHours","setSleepHours","currentUser","fetchCurrentUser","userRef","useEffect","logMood","console","log","data","user","getTodayLog","then","todayRef","ref","update","catch","error","firestore","collection","doc","set","logDate","obj","logSleep","container"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { View } from 'react-native';\nimport Calendar from '../../components/calendar/Calendar';\nimport LoggerView from '../../components/LoggerCard/LoggerView';\nimport MoodSelector from '../MoodSelector/Mood';\nimport SleepSelector from '../SleepSelector/Sleep';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport { CurrentUserProvider, useCurrentUser } from '../../CurrentUserContext';\nimport styles from './styles';\nimport { formatLogData, formatDate } from './HandleData'\n\n\nconst today = new Date();\nconst moodInit = 10;\n\nfunction Home(props) {\n  // Use state variables to store date and mood\n  const [mood, setMood] = useState(moodInit);\n  const [date, setDate] = useState(today);\n  const [sleepHours, setSleepHours] = useState(0);\n  const { currentUser, fetchCurrentUser } = useCurrentUser();\n\n  const userRef = currentUser;\n\n  React.useEffect(() => {\n    fetchCurrentUser();\n  }, []);\n\n  /********************/\n  function logMood(mood) {\n    console.log(`Mood: ${mood} Date: ${date}`);\n\n    setMood(mood);\n\n    let data = formatLogData(date, mood, userRef, props.user);\n    /* If user already has logged data for today, then update() \n            if not, then add() new document for today\n        */\n    getTodayLog(date).then((todayRef) => {\n      if (todayRef) {\n        console.log('todayRef: ' + todayRef);\n        todayRef.ref\n          .update(data)\n          .then(() => {\n            console.log('Document successfully updated');\n          })\n          .catch((error) => {\n            // The document probably doesn't exist.\n            console.error('Error updating document: ', error);\n          });\n      } else {\n        // New doc for 'today''s date\n        firebase.firestore().collection('moodLog').doc().set(data);\n      }\n    });\n  }\n\n  function logDate(obj) {\n    // console.log(obj.date)\n    setDate(obj.date);\n  }\n\n  function logSleep(obj) {\n    setSleepHours(obj);\n    console.log('Sleep hours in Home component: ' + obj);\n  }\n\n  return (\n    <CurrentUserProvider>\n      <View style={styles.container}>\n        {/* import the context and pass along the data */}\n        <Calendar date={date} logDate={logDate} />\n        <LoggerView\n          selector={<MoodSelector mood={mood} logMood={logMood} />}\n          cardTitle=\"mood\"\n          expandHeight={60}\n        />\n        <LoggerView\n          selector={<SleepSelector hours={sleepHours} logSleep={logSleep} />}\n          cardTitle=\"sleep\"\n          expandHeight={80}\n        />\n      </View>\n    </CurrentUserProvider>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}