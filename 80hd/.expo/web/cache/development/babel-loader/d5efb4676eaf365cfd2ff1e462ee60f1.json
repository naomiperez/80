{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nexport function getTodayLog(date) {\n  var db, formattedDate, todayRef;\n  return _regeneratorRuntime.async(function getTodayLog$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          db = firebase.firestore();\n          formattedDate = formatDate(date);\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(db.collection('moodLog').where('date', '==', formattedDate).get().then(function (querySnapshot) {\n            if (querySnapshot.docs.length === 0) {\n              console.log('No Documents from today');\n              return undefined;\n            } else if (querySnapshot.docs.length > 1) {\n              console.log('More than one document from today');\n            }\n\n            return querySnapshot.docs[0];\n          }).catch(function (error) {\n            console.log('Error getting documents: ', error);\n          }));\n\n        case 4:\n          todayRef = _context.sent;\n          return _context.abrupt(\"return\", todayRef);\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function formatLogData(date, mood, userRef, user) {\n  var day = date.getDay();\n  var formattedDate = formatDate(date);\n\n  if (userRef) {\n    console.log('userRef: ' + userRef);\n    var data = {\n      date: formattedDate,\n      mood: mood,\n      weekday: day,\n      user: userRef\n    };\n    return data;\n  } else {\n    var _user = props.user;\n    console.log('user: ' + _user);\n    var _data = {\n      date: formattedDate,\n      mood: mood,\n      weekday: day,\n      user: _user\n    };\n    return _data;\n  }\n}\n\nfunction formatDate(date) {\n  console.log(date);\n  var formattedDate = date.getFullYear().toString() + '-' + date.getMonth().toString() + '-' + date.getDate().toString();\n  console.log('formatDate function:' + formattedDate);\n  return formattedDate;\n}","map":{"version":3,"sources":["/Users/naomiperez/Documents/GitHub/80/client/80hd/src/containers/HomeScreen/HandleData.js"],"names":["React","useState","firebase","getTodayLog","date","db","firestore","formattedDate","formatDate","collection","where","get","then","querySnapshot","docs","length","console","log","undefined","catch","error","todayRef","formatLogData","mood","userRef","user","day","getDay","data","weekday","props","getFullYear","toString","getMonth","getDate"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAGA,OAAO,SAAeC,WAAf,CAA2BC,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,UAAAA,EADH,GACQH,QAAQ,CAACI,SAAT,EADR;AAKCC,UAAAA,aALD,GAKiBC,UAAU,CAACJ,IAAD,CAL3B;AAAA;AAAA,2CAMoBC,EAAE,CACtBI,UADoB,CACT,SADS,EAEpBC,KAFoB,CAEd,MAFc,EAEN,IAFM,EAEAH,aAFA,EAGpBI,GAHoB,GAIpBC,IAJoB,CAIf,UAACC,aAAD,EAAmB;AACvB,gBAAIA,aAAa,CAACC,IAAd,CAAmBC,MAAnB,KAA8B,CAAlC,EAAqC;AACnCC,cAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,qBAAOC,SAAP;AACD,aAHD,MAGO,IAAIL,aAAa,CAACC,IAAd,CAAmBC,MAAnB,GAA4B,CAAhC,EAAmC;AACxCC,cAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACD;;AAED,mBAAOJ,aAAa,CAACC,IAAd,CAAmB,CAAnB,CAAP;AAED,WAdoB,EAepBK,KAfoB,CAed,UAACC,KAAD,EAAW;AAChBJ,YAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCG,KAAzC;AACD,WAjBoB,CANpB;;AAAA;AAMGC,UAAAA,QANH;AAAA,2CAyBIA,QAzBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BP,OAAO,SAASC,aAAT,CAAuBlB,IAAvB,EAA6BmB,IAA7B,EAAmCC,OAAnC,EAA4CC,IAA5C,EAAkD;AAErD,MAAIC,GAAG,GAAGtB,IAAI,CAACuB,MAAL,EAAV;AACA,MAAMpB,aAAa,GAAGC,UAAU,CAACJ,IAAD,CAAhC;;AAEA,MAAIoB,OAAJ,EAAa;AACXR,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAcO,OAA1B;AAEA,QAAII,IAAI,GAAG;AACTxB,MAAAA,IAAI,EAAEG,aADG;AAETgB,MAAAA,IAAI,EAAEA,IAFG;AAGTM,MAAAA,OAAO,EAAEH,GAHA;AAITD,MAAAA,IAAI,EAAED;AAJG,KAAX;AAMA,WAAOI,IAAP;AACD,GAVD,MAUO;AAEL,QAAIH,KAAI,GAAGK,KAAK,CAACL,IAAjB;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAWQ,KAAvB;AACA,QAAIG,KAAI,GAAG;AACTxB,MAAAA,IAAI,EAAEG,aADG;AAETgB,MAAAA,IAAI,EAAEA,IAFG;AAGTM,MAAAA,OAAO,EAAEH,GAHA;AAITD,MAAAA,IAAI,EAAEA;AAJG,KAAX;AAMA,WAAOG,KAAP;AACD;AACF;;AAEH,SAASpB,UAAT,CAAoBJ,IAApB,EAA0B;AACtBY,EAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ;AACA,MAAMG,aAAa,GACjBH,IAAI,CAAC2B,WAAL,GAAmBC,QAAnB,KACA,GADA,GAEA5B,IAAI,CAAC6B,QAAL,GAAgBD,QAAhB,EAFA,GAGA,GAHA,GAIA5B,IAAI,CAAC8B,OAAL,GAAeF,QAAf,EALF;AAMAhB,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAyBV,aAArC;AACA,SAAOA,aAAP;AACD","sourcesContent":["import React, { useState } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\n/* Returns the data reference from today if it exists */\nexport async function getTodayLog(date) {\n    const db = firebase.firestore();\n\n    // If user has already logged something today, then get the document\n    // with today's date from the 'moodLog' Firestore collection\n    let formattedDate = formatDate(date);\n    const todayRef = await db\n      .collection('moodLog')\n      .where('date', '==', formattedDate)\n      .get()\n      .then((querySnapshot) => {\n        if (querySnapshot.docs.length === 0) {\n          console.log('No Documents from today');\n          return undefined;\n        } else if (querySnapshot.docs.length > 1) {\n          console.log('More than one document from today');\n        }\n\n        return querySnapshot.docs[0];\n        //  id & data properties\n      })\n      .catch((error) => {\n        console.log('Error getting documents: ', error);\n      });\n\n    return todayRef;\n  }\n\nexport function formatLogData(date, mood, userRef, user) {\n    /* Format date to pass to document.add() */\n    let day = date.getDay();\n    const formattedDate = formatDate(date);\n    /* Check if this component was returned by Registration/Login or App.js */\n    if (userRef) {\n      console.log('userRef: ' + userRef);\n      // Create new data for day and add it as a document\n      let data = {\n        date: formattedDate,\n        mood: mood,\n        weekday: day,\n        user: userRef,\n      };\n      return data;\n    } else {\n        // change this\n      let user = props.user;\n      console.log('user: ' + user);\n      let data = {\n        date: formattedDate,\n        mood: mood,\n        weekday: day,\n        user: user,\n      };\n      return data;\n    }\n  }\n\nfunction formatDate(date) {\n    console.log(date)\n    const formattedDate =\n      date.getFullYear().toString() +\n      '-' +\n      date.getMonth().toString() +\n      '-' +\n      date.getDate().toString();\n    console.log('formatDate function:' + formattedDate)\n    return formattedDate;\n  }"]},"metadata":{},"sourceType":"module"}