{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/naomiperez/Documents/GitHub/80/client/80hd/src/containers/HomeScreen/Home.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Calendar from \"../../components/calendar/Calendar\";\nimport LoggerView from \"../../components/LoggerCard/LoggerView\";\nimport MoodSelector from \"../MoodSelector/Mood\";\nimport SleepSelector from \"../SleepSelector/Sleep\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport { CurrentUserProvider, useCurrentUser } from \"../../CurrentUserContext\";\nimport styles from \"./styles\";\nimport { formatLogData } from \"./HandleData\";\nvar today = new Date();\nvar moodInit = 10;\n\nfunction Home(props) {\n  var _useState = useState(moodInit),\n      _useState2 = _slicedToArray(_useState, 2),\n      mood = _useState2[0],\n      setMood = _useState2[1];\n\n  var _useState3 = useState(today),\n      _useState4 = _slicedToArray(_useState3, 2),\n      date = _useState4[0],\n      setDate = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      sleepHours = _useState6[0],\n      setSleepHours = _useState6[1];\n\n  var _useCurrentUser = useCurrentUser(),\n      currentUser = _useCurrentUser.currentUser,\n      fetchCurrentUser = _useCurrentUser.fetchCurrentUser;\n\n  var userRef = currentUser;\n  React.useEffect(function () {\n    fetchCurrentUser();\n  }, []);\n\n  function getTodayLog() {\n    var db, formattedDate, todayRef;\n    return _regeneratorRuntime.async(function getTodayLog$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            db = firebase.firestore();\n            formattedDate = formatDate();\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(db.collection('moodLog').where('date', '==', formattedDate).get().then(function (querySnapshot) {\n              if (querySnapshot.docs.length === 0) {\n                console.log('No Documents from today');\n                return undefined;\n              } else if (querySnapshot.docs.length > 1) {\n                console.log('More than one document from today');\n              }\n\n              return querySnapshot.docs[0];\n            }).catch(function (error) {\n              console.log('Error getting documents: ', error);\n            }));\n\n          case 4:\n            todayRef = _context.sent;\n            return _context.abrupt(\"return\", todayRef);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function logMood(mood) {\n    console.log(\"Mood: \" + mood + \" Date: \" + date);\n    setMood(mood);\n    var data = formatLogData();\n    getTodayLog().then(function (todayRef) {\n      if (todayRef) {\n        console.log('todayRef: ' + todayRef);\n        todayRef.ref.update(data).then(function () {\n          console.log('Document successfully updated');\n        }).catch(function (error) {\n          console.error('Error updating document: ', error);\n        });\n      } else {\n        firebase.firestore().collection('moodLog').doc().set(data);\n      }\n    });\n  }\n\n  function formatDate() {\n    var formattedDate = date.getFullYear().toString() + '-' + date.getMonth().toString() + '-' + date.getDate().toString();\n    return formattedDate;\n  }\n\n  function logDate(obj) {\n    setDate(obj.date);\n  }\n\n  function logSleep(obj) {\n    setSleepHours(obj);\n    console.log('Sleep hours in Home component: ' + obj);\n  }\n\n  return React.createElement(CurrentUserProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, React.createElement(Calendar, {\n    date: date,\n    logDate: logDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }), React.createElement(LoggerView, {\n    selector: React.createElement(MoodSelector, {\n      mood: mood,\n      logMood: logMood,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }\n    }),\n    cardTitle: \"mood\",\n    expandHeight: 60,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }), React.createElement(LoggerView, {\n    selector: React.createElement(SleepSelector, {\n      hours: sleepHours,\n      logSleep: logSleep,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }\n    }),\n    cardTitle: \"sleep\",\n    expandHeight: 80,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/naomiperez/Documents/GitHub/80/client/80hd/src/containers/HomeScreen/Home.js"],"names":["React","useState","Calendar","LoggerView","MoodSelector","SleepSelector","firebase","CurrentUserProvider","useCurrentUser","styles","formatLogData","today","Date","moodInit","Home","props","mood","setMood","date","setDate","sleepHours","setSleepHours","currentUser","fetchCurrentUser","userRef","useEffect","getTodayLog","db","firestore","formattedDate","formatDate","collection","where","get","then","querySnapshot","docs","length","console","log","undefined","catch","error","todayRef","logMood","data","ref","update","doc","set","getFullYear","toString","getMonth","getDate","logDate","obj","logSleep","container"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { View } from 'react-native';\nimport Calendar from '../../components/calendar/Calendar';\nimport LoggerView from '../../components/LoggerCard/LoggerView';\nimport MoodSelector from '../MoodSelector/Mood';\nimport SleepSelector from '../SleepSelector/Sleep';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport { CurrentUserProvider, useCurrentUser } from '../../CurrentUserContext';\nimport styles from './styles';\nimport { formatLogData } from './HandleData'\n\n\nconst today = new Date();\nconst moodInit = 10;\n\nfunction Home(props) {\n  // Use state variables to store date and mood\n  const [mood, setMood] = useState(moodInit);\n  const [date, setDate] = useState(today);\n  const [sleepHours, setSleepHours] = useState(0);\n  const { currentUser, fetchCurrentUser } = useCurrentUser();\n\n  const userRef = currentUser;\n\n  React.useEffect(() => {\n    fetchCurrentUser();\n  }, []);\n\n  /* Returns  */\n  async function getTodayLog() {\n    const db = firebase.firestore();\n\n    // If user has already logged something today, then get the document\n    // with today's date from the 'moodLog' Firestore collection\n    let formattedDate = formatDate();\n    const todayRef = await db\n      .collection('moodLog')\n      .where('date', '==', formattedDate)\n      .get()\n      .then((querySnapshot) => {\n        if (querySnapshot.docs.length === 0) {\n          console.log('No Documents from today');\n          return undefined;\n        } else if (querySnapshot.docs.length > 1) {\n          console.log('More than one document from today');\n        }\n\n        return querySnapshot.docs[0];\n        //  id & data properties\n      })\n      .catch((error) => {\n        console.log('Error getting documents: ', error);\n      });\n\n    return todayRef;\n  }\n\n  /********************/\n  function logMood(mood) {\n    console.log(`Mood: ${mood} Date: ${date}`);\n\n    setMood(mood);\n\n    let data = formatLogData();\n    /* If user already has logged data for today, then update() \n            if not, then add() new document for today\n        */\n    getTodayLog().then((todayRef) => {\n      if (todayRef) {\n        console.log('todayRef: ' + todayRef);\n        todayRef.ref\n          .update(data)\n          .then(() => {\n            console.log('Document successfully updated');\n          })\n          .catch((error) => {\n            // The document probably doesn't exist.\n            console.error('Error updating document: ', error);\n          });\n      } else {\n        // New doc for 'today''s date\n        firebase.firestore().collection('moodLog').doc().set(data);\n      }\n    });\n  }\n\n  function formatDate() {\n    const formattedDate =\n      date.getFullYear().toString() +\n      '-' +\n      date.getMonth().toString() +\n      '-' +\n      date.getDate().toString();\n    return formattedDate;\n  }\n\n  function logDate(obj) {\n    // console.log(obj.date)\n    setDate(obj.date);\n  }\n\n  function logSleep(obj) {\n    setSleepHours(obj);\n    console.log('Sleep hours in Home component: ' + obj);\n  }\n\n  return (\n    <CurrentUserProvider>\n      <View style={styles.container}>\n        {/* import the context and pass along the data */}\n        <Calendar date={date} logDate={logDate} />\n        <LoggerView\n          selector={<MoodSelector mood={mood} logMood={logMood} />}\n          cardTitle=\"mood\"\n          expandHeight={60}\n        />\n        <LoggerView\n          selector={<SleepSelector hours={sleepHours} logSleep={logSleep} />}\n          cardTitle=\"sleep\"\n          expandHeight={80}\n        />\n      </View>\n    </CurrentUserProvider>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}