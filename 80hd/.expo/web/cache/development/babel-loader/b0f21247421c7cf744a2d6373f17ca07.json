{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/naomiperez/Documents/GitHub/80/client/80hd/src/components/ExpandableCard.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport dropdown from \"../assets/images/dropdown.png\";\nimport styles from \"./LoggerCard/styles\";\n\nvar ExpandableCard = function (_React$Component) {\n  _inherits(ExpandableCard, _React$Component);\n\n  var _super = _createSuper(ExpandableCard);\n\n  function ExpandableCard(props) {\n    var _this;\n\n    _classCallCheck(this, ExpandableCard);\n\n    _this = _super.call(this, props);\n    _this.anime = {\n      height: new Animated.Value(60),\n      expanded: false,\n      contentHeight: 0\n    };\n    _this.initContentHeight = _this.initContentHeight.bind(_assertThisInitialized(_this));\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_this));\n    _this.anime.expanded = props.expanded;\n    _this.state = {\n      expanded: props.expanded\n    };\n    _this.anime.height = new Animated.Value(props.expandHeight);\n    return _this;\n  }\n\n  _createClass(ExpandableCard, [{\n    key: \"getMaxValue\",\n    value: function getMaxValue() {\n      return this.anime.contentHeight;\n    }\n  }, {\n    key: \"getMinValue\",\n    value: function getMinValue() {\n      return 0;\n    }\n  }, {\n    key: \"initContentHeight\",\n    value: function initContentHeight(evt) {\n      if (this.anime.contentHeight > 0) return;\n      this.anime.contentHeight = evt.nativeEvent.layout.height;\n      this.anime.height.setValue(this.anime.expanded ? this.getMaxValue() : this.getMinValue());\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      var _this2 = this;\n\n      Animated.timing(this.anime.height, {\n        toValue: this.anime.expanded ? this.getMinValue() : this.getMaxValue(),\n        duration: 90,\n        useNativeDriver: false\n      }).start();\n      this.anime.expanded = !this.anime.expanded;\n\n      if (this.state.expanded === false) {\n        setTimeout(function () {\n          _this2.setState(function (prevState) {\n            return {\n              expanded: !prevState.expanded\n            };\n          });\n        }, 90);\n      } else {\n        this.setState(function (prevState) {\n          return {\n            expanded: !prevState.expanded\n          };\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var expanded = this.state.expanded;\n      var _this$props = this.props,\n          children = _this$props.children,\n          cardTitle = _this$props.cardTitle;\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: styles.inlineStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: styles.text,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }\n      }, cardTitle), React.createElement(TouchableHighlight, {\n        underlayColor: \"transparent\",\n        onPress: this.toggle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }\n      }, React.createElement(Image, {\n        style: styles.img,\n        source: dropdown,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }\n      }))), React.createElement(Animated.View, {\n        style: [{\n          height: this.anime.height\n        }],\n        onLayout: this.initContentHeight,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }\n      }, expanded === true ? children : React.createElement(React.Fragment, null)));\n    }\n  }]);\n\n  return ExpandableCard;\n}(React.Component);\n\nexport default ExpandableCard;","map":{"version":3,"sources":["/Users/naomiperez/Documents/GitHub/80/client/80hd/src/components/ExpandableCard.js"],"names":["React","dropdown","styles","ExpandableCard","props","anime","height","Animated","Value","expanded","contentHeight","initContentHeight","bind","toggle","state","expandHeight","evt","nativeEvent","layout","setValue","getMaxValue","getMinValue","timing","toValue","duration","useNativeDriver","start","setTimeout","setState","prevState","children","cardTitle","container","inlineStyle","text","img","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Text, View, Image, TouchableHighlight, Animated } from 'react-native';\nimport dropdown from '../assets/images/dropdown.png';\nimport styles from './LoggerCard/styles';\n\nclass ExpandableCard extends React.Component {\n  anime = {\n    height: new Animated.Value(60),\n    expanded: false,\n    contentHeight: 0,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.initContentHeight = this.initContentHeight.bind(this);\n    this.toggle = this.toggle.bind(this);\n\n    this.anime.expanded = props.expanded;\n    this.state = {\n      expanded: props.expanded,\n    };\n\n    this.anime.height = new Animated.Value(props.expandHeight);\n  }\n\n  getMaxValue() {\n    return this.anime.contentHeight;\n  }\n\n  getMinValue() {\n    return 0;\n  }\n\n  initContentHeight(evt) {\n    if (this.anime.contentHeight > 0) return;\n    this.anime.contentHeight = evt.nativeEvent.layout.height;\n    this.anime.height.setValue(this.anime.expanded ? this.getMaxValue() : this.getMinValue());\n  }\n\n  toggle() {\n    Animated.timing(this.anime.height, {\n      toValue: this.anime.expanded ? this.getMinValue() : this.getMaxValue(),\n      duration: 90,\n      useNativeDriver: false,\n    }).start();\n    this.anime.expanded = !this.anime.expanded;\n\n    // Wait for container View to expand before rendering the Selection Options\n    if (this.state.expanded === false) {\n      setTimeout(() => {\n        this.setState((prevState) => ({\n          expanded: !prevState.expanded,\n        }));\n      }, 90);\n    } else {\n      this.setState((prevState) => ({\n        expanded: !prevState.expanded,\n      }));\n    }\n  }\n\n  // The outermost View is the Card, the second View is the flex container,\n  // then the Text is the title of the card, the TouchableHighlight is the 'expand' button,\n  // and the Animated.View is the expanded View that has a dynamic height and displays the\n  // Logger Selection options\n  render() {\n    const { expanded } = this.state;\n    const { children, cardTitle } = this.props;\n\n    return (\n      <View style={styles.container}>\n        <View style={styles.inlineStyle}>\n          <Text style={styles.text}>{cardTitle}</Text>\n          <TouchableHighlight underlayColor=\"transparent\" onPress={this.toggle}>\n            <Image style={styles.img} source={dropdown} />\n          </TouchableHighlight>\n        </View>\n        <Animated.View style={[{ height: this.anime.height }]} onLayout={this.initContentHeight}>\n          {expanded === true ? children : <></>}\n        </Animated.View>\n      </View>\n    );\n  }\n}\n\nexport default ExpandableCard;\n"]},"metadata":{},"sourceType":"module"}