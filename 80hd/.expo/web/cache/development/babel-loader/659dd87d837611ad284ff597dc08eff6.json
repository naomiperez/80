{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nexport function getTodayLog(date) {\n  var db, formattedDate, todayRef;\n  return _regeneratorRuntime.async(function getTodayLog$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          db = firebase.firestore();\n          formattedDate = formatDate(date);\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(db.collection('moodLog').where('date', '==', formattedDate).get().then(function (querySnapshot) {\n            if (querySnapshot.docs.length === 0) {\n              console.log('No Documents from today');\n              return undefined;\n            } else if (querySnapshot.docs.length > 1) {\n              console.log('More than one document from today');\n            }\n\n            return querySnapshot.docs[0];\n          }).catch(function (error) {\n            console.log('Error getting documents: ', error);\n          }));\n\n        case 4:\n          todayRef = _context.sent;\n          return _context.abrupt(\"return\", todayRef);\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function formatLogData(date, mood, userRef, user) {\n  var day = date.getDay();\n  var formattedDate = formatDate(date);\n\n  if (userRef) {\n    console.log('userRef: ' + userRef);\n    var data = {\n      date: formattedDate,\n      mood: mood,\n      weekday: day,\n      user: userRef\n    };\n    return data;\n  } else {\n    console.log('user: ' + user);\n    var _data = {\n      date: formattedDate,\n      mood: mood,\n      weekday: day,\n      user: user\n    };\n    return _data;\n  }\n}\n\nfunction formatDate(date) {\n  console.log(date);\n  var formattedDate = date.getFullYear().toString() + '-' + (date.getMonth() + 1).toString() + '-' + date.getDate().toString();\n  console.log('formatDate function:' + formattedDate);\n  return formattedDate;\n}","map":{"version":3,"sources":["/Users/naomiperez/Documents/GitHub/80/80hd/src/containers/HomeScreen/HandleData.js"],"names":["firebase","getTodayLog","date","db","firestore","formattedDate","formatDate","collection","where","get","then","querySnapshot","docs","length","console","log","undefined","catch","error","todayRef","formatLogData","mood","userRef","user","day","getDay","data","weekday","getFullYear","toString","getMonth","getDate"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAGA,OAAO,SAAeC,WAAf,CAA2BC,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACAC,UAAAA,EADA,GACKH,QAAQ,CAACI,SAAT,EADL;AAKFC,UAAAA,aALE,GAKcC,UAAU,CAACJ,IAAD,CALxB;AAAA;AAAA,2CAMiBC,EAAE,CACvBI,UADqB,CACV,SADU,EAErBC,KAFqB,CAEf,MAFe,EAEP,IAFO,EAEDH,aAFC,EAGrBI,GAHqB,GAIrBC,IAJqB,CAIhB,UAACC,aAAD,EAAmB;AACxB,gBAAIA,aAAa,CAACC,IAAd,CAAmBC,MAAnB,KAA8B,CAAlC,EAAqC;AACpCC,cAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,qBAAOC,SAAP;AACA,aAHD,MAGO,IAAIL,aAAa,CAACC,IAAd,CAAmBC,MAAnB,GAA4B,CAAhC,EAAmC;AACzCC,cAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACA;;AAED,mBAAOJ,aAAa,CAACC,IAAd,CAAmB,CAAnB,CAAP;AAEA,WAdqB,EAerBK,KAfqB,CAef,UAACC,KAAD,EAAW;AACjBJ,YAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCG,KAAzC;AACA,WAjBqB,CANjB;;AAAA;AAMAC,UAAAA,QANA;AAAA,2CAyBCA,QAzBD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BP,OAAO,SAASC,aAAT,CAAuBlB,IAAvB,EAA6BmB,IAA7B,EAAmCC,OAAnC,EAA4CC,IAA5C,EAAkD;AAExD,MAAIC,GAAG,GAAGtB,IAAI,CAACuB,MAAL,EAAV;AACA,MAAMpB,aAAa,GAAGC,UAAU,CAACJ,IAAD,CAAhC;;AAEA,MAAIoB,OAAJ,EAAa;AACZR,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAcO,OAA1B;AAEA,QAAII,IAAI,GAAG;AACVxB,MAAAA,IAAI,EAAEG,aADI;AAEVgB,MAAAA,IAAI,EAAEA,IAFI;AAGVM,MAAAA,OAAO,EAAEH,GAHC;AAIVD,MAAAA,IAAI,EAAED;AAJI,KAAX;AAMA,WAAOI,IAAP;AACA,GAVD,MAUO;AACNZ,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAWQ,IAAvB;AACA,QAAIG,KAAI,GAAG;AACVxB,MAAAA,IAAI,EAAEG,aADI;AAEVgB,MAAAA,IAAI,EAAEA,IAFI;AAGVM,MAAAA,OAAO,EAAEH,GAHC;AAIVD,MAAAA,IAAI,EAAEA;AAJI,KAAX;AAMA,WAAOG,KAAP;AACA;AACD;;AAGD,SAASpB,UAAT,CAAoBJ,IAApB,EAA0B;AACzBY,EAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ;AACA,MAAMG,aAAa,GAClBH,IAAI,CAAC0B,WAAL,GAAmBC,QAAnB,KACA,GADA,GAEA,CAAC3B,IAAI,CAAC4B,QAAL,KAAkB,CAAnB,EAAsBD,QAAtB,EAFA,GAGA,GAHA,GAIA3B,IAAI,CAAC6B,OAAL,GAAeF,QAAf,EALD;AAMAf,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAyBV,aAArC;AACA,SAAOA,aAAP;AACA","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\n/* Returns the data reference from today if it exists */\nexport async function getTodayLog(date) {\n\tconst db = firebase.firestore()\n\n\t// If user has already logged something today, then get the document\n\t// with today's date from the 'moodLog' Firestore collection\n\tlet formattedDate = formatDate(date)\n\tconst todayRef = await db\n\t\t.collection('moodLog')\n\t\t.where('date', '==', formattedDate)\n\t\t.get()\n\t\t.then((querySnapshot) => {\n\t\t\tif (querySnapshot.docs.length === 0) {\n\t\t\t\tconsole.log('No Documents from today')\n\t\t\t\treturn undefined\n\t\t\t} else if (querySnapshot.docs.length > 1) {\n\t\t\t\tconsole.log('More than one document from today')\n\t\t\t}\n\n\t\t\treturn querySnapshot.docs[0]\n\t\t\t//  id & data properties\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.log('Error getting documents: ', error)\n\t\t})\n\n\treturn todayRef\n}\n\nexport function formatLogData(date, mood, userRef, user) {\n\t/* Format date to pass to document.add() */\n\tlet day = date.getDay()\n\tconst formattedDate = formatDate(date)\n\t/* Check if this component was returned by Registration/Login or App.js */\n\tif (userRef) {\n\t\tconsole.log('userRef: ' + userRef)\n\t\t// Create new data for day and add it as a document\n\t\tlet data = {\n\t\t\tdate: formattedDate,\n\t\t\tmood: mood,\n\t\t\tweekday: day,\n\t\t\tuser: userRef,\n\t\t}\n\t\treturn data\n\t} else {\n\t\tconsole.log('user: ' + user)\n\t\tlet data = {\n\t\t\tdate: formattedDate,\n\t\t\tmood: mood,\n\t\t\tweekday: day,\n\t\t\tuser: user,\n\t\t}\n\t\treturn data\n\t}\n}\n\n/* Adding 1 to the month as a fix for something... I'm not sure what */\nfunction formatDate(date) {\n\tconsole.log(date)\n\tconst formattedDate =\n\t\tdate.getFullYear().toString() +\n\t\t'-' +\n\t\t(date.getMonth() + 1).toString() +\n\t\t'-' +\n\t\tdate.getDate().toString()\n\tconsole.log('formatDate function:' + formattedDate)\n\treturn formattedDate\n}\n"]},"metadata":{},"sourceType":"module"}