{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { hasOwnProperty } from '@react-native-firebase/app/lib/common';\nvar MAP = {\n  nan: 0,\n  '-infinity': 1,\n  infinity: 2,\n  null: 3,\n  documentid: 4,\n  booleanTrue: 5,\n  booleanFalse: 6,\n  number: 7,\n  string: 8,\n  stringEmpty: 9,\n  array: 10,\n  reference: 11,\n  geopoint: 12,\n  timestamp: 13,\n  blob: 14,\n  fieldvalue: 15,\n  object: 16,\n  unknown: -999\n};\nvar MAP_ENTRIES = Object.entries(MAP);\nexport function getTypeMapInt(type) {\n  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n  if (hasOwnProperty(MAP, type)) {\n    var array = [MAP[type]];\n\n    if (value !== undefined) {\n      array.push(value);\n    }\n\n    return array;\n  }\n\n  return null;\n}\nexport function getTypeMapName(value) {\n  for (var i = 0; i < MAP_ENTRIES.length; i++) {\n    var _MAP_ENTRIES$i = _slicedToArray(MAP_ENTRIES[i], 2),\n        name = _MAP_ENTRIES$i[0],\n        int = _MAP_ENTRIES$i[1];\n\n    if (value === int) {\n      return name;\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/Users/naomiperez/Documents/GitHub/80/client/80hd/node_modules/@react-native-firebase/firestore/lib/utils/typemap.js"],"names":["hasOwnProperty","MAP","nan","infinity","null","documentid","booleanTrue","booleanFalse","number","string","stringEmpty","array","reference","geopoint","timestamp","blob","fieldvalue","object","unknown","MAP_ENTRIES","Object","entries","getTypeMapInt","type","value","undefined","push","getTypeMapName","i","length","name","int"],"mappings":";AAiBA,SAASA,cAAT,QAA+B,uCAA/B;AAEA,IAAMC,GAAG,GAAG;AACVC,EAAAA,GAAG,EAAE,CADK;AAEV,eAAa,CAFH;AAGVC,EAAAA,QAAQ,EAAE,CAHA;AAIVC,EAAAA,IAAI,EAAE,CAJI;AAKVC,EAAAA,UAAU,EAAE,CALF;AAMVC,EAAAA,WAAW,EAAE,CANH;AAOVC,EAAAA,YAAY,EAAE,CAPJ;AAQVC,EAAAA,MAAM,EAAE,CARE;AASVC,EAAAA,MAAM,EAAE,CATE;AAUVC,EAAAA,WAAW,EAAE,CAVH;AAWVC,EAAAA,KAAK,EAAE,EAXG;AAYVC,EAAAA,SAAS,EAAE,EAZD;AAaVC,EAAAA,QAAQ,EAAE,EAbA;AAcVC,EAAAA,SAAS,EAAE,EAdD;AAeVC,EAAAA,IAAI,EAAE,EAfI;AAgBVC,EAAAA,UAAU,EAAE,EAhBF;AAiBVC,EAAAA,MAAM,EAAE,EAjBE;AAkBVC,EAAAA,OAAO,EAAE,CAAC;AAlBA,CAAZ;AAqBA,IAAMC,WAAW,GAAGC,MAAM,CAACC,OAAP,CAAepB,GAAf,CAApB;AAQA,OAAO,SAASqB,aAAT,CAAuBC,IAAvB,EAAgD;AAAA,MAAnBC,KAAmB,uEAAXC,SAAW;;AACrD,MAAIzB,cAAc,CAACC,GAAD,EAAMsB,IAAN,CAAlB,EAA+B;AAC7B,QAAMZ,KAAK,GAAG,CAACV,GAAG,CAACsB,IAAD,CAAJ,CAAd;;AACA,QAAIC,KAAK,KAAKC,SAAd,EAAyB;AACvBd,MAAAA,KAAK,CAACe,IAAN,CAAWF,KAAX;AACD;;AACD,WAAOb,KAAP;AACD;;AAED,SAAO,IAAP;AACD;AAOD,OAAO,SAASgB,cAAT,CAAwBH,KAAxB,EAA+B;AACpC,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,WAAW,CAACU,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,wCAAoBT,WAAW,CAACS,CAAD,CAA/B;AAAA,QAAOE,IAAP;AAAA,QAAaC,GAAb;;AACA,QAAIP,KAAK,KAAKO,GAAd,EAAmB;AACjB,aAAOD,IAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { hasOwnProperty } from '@react-native-firebase/app/lib/common';\n\nconst MAP = {\n  nan: 0,\n  '-infinity': 1,\n  infinity: 2,\n  null: 3,\n  documentid: 4, // to native only\n  booleanTrue: 5,\n  booleanFalse: 6,\n  number: 7,\n  string: 8,\n  stringEmpty: 9,\n  array: 10,\n  reference: 11,\n  geopoint: 12,\n  timestamp: 13,\n  blob: 14,\n  fieldvalue: 15,\n  object: 16,\n  unknown: -999,\n};\n\nconst MAP_ENTRIES = Object.entries(MAP);\n\n/**\n * Returns the array map with value for a given type\n * @param type\n * @param value\n * @returns {null|*[]}\n */\nexport function getTypeMapInt(type, value = undefined) {\n  if (hasOwnProperty(MAP, type)) {\n    const array = [MAP[type]];\n    if (value !== undefined) {\n      array.push(value);\n    }\n    return array;\n  }\n\n  return null;\n}\n\n/**\n * Returns the type of a given int value\n * @param value\n * @returns {null}\n */\nexport function getTypeMapName(value) {\n  for (let i = 0; i < MAP_ENTRIES.length; i++) {\n    const [name, int] = MAP_ENTRIES[i];\n    if (value === int) {\n      return name;\n    }\n  }\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}