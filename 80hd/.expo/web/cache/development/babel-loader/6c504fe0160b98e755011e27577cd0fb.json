{"ast":null,"code":"import binaryToBase64 from 'react-native/Libraries/Utilities/binaryToBase64';\nimport { promiseDefer } from \"./promise\";\nvar CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfunction btoa(input) {\n  var map;\n  var i = 0;\n  var block = 0;\n  var output = '';\n\n  for (block = 0, i = 0, map = CHARS; input.charAt(i | 0) || (map = '=', i % 1); output += map.charAt(63 & block >> 8 - i % 1 * 8)) {\n    var charCode = input.charCodeAt(i += 3 / 4);\n\n    if (charCode > 0xff) {\n      throw new Error(\"'RNFirebase.Base64.btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n    }\n\n    block = block << 8 | charCode;\n  }\n\n  return output;\n}\n\nfunction atob(input) {\n  var i = 0;\n  var bc = 0;\n  var bs = 0;\n  var buffer;\n  var output = '';\n  var str = input.replace(/[=]+$/, '');\n\n  if (str.length % 4 === 1) {\n    throw new Error(\"'RNFirebase.Base64.atob' failed: The string to be decoded is not correctly encoded.\");\n  }\n\n  for (bc = 0, bs = 0, i = 0; buffer = str.charAt(i++); ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n    buffer = CHARS.indexOf(buffer);\n  }\n\n  return output;\n}\n\nfunction fromData(data) {\n  if (data instanceof Blob) {\n    var fileReader = new FileReader();\n\n    var _promiseDefer = promiseDefer(),\n        resolve = _promiseDefer.resolve,\n        reject = _promiseDefer.reject,\n        promise = _promiseDefer.promise;\n\n    fileReader.readAsDataURL(data);\n\n    fileReader.onloadend = function onloadend() {\n      resolve({\n        string: fileReader.result,\n        format: 'data_url'\n      });\n    };\n\n    fileReader.onerror = function onerror(event) {\n      fileReader.abort();\n      reject(event);\n    };\n\n    return promise;\n  }\n\n  if (data instanceof ArrayBuffer || data instanceof Uint8Array) {\n    return Promise.resolve({\n      string: binaryToBase64(data),\n      format: 'base64'\n    });\n  }\n\n  throw new Error(\"'RNFirebase.Base64.fromData' failed: Unknown data type.\");\n}\n\nexport default {\n  btoa: btoa,\n  atob: atob,\n  fromData: fromData\n};","map":{"version":3,"sources":["/Users/naomiperez/Documents/GitHub/80/client/80hd/node_modules/@react-native-firebase/app/lib/common/Base64.js"],"names":["binaryToBase64","promiseDefer","CHARS","btoa","input","map","i","block","output","charAt","charCode","charCodeAt","Error","atob","bc","bs","buffer","str","replace","length","String","fromCharCode","indexOf","fromData","data","Blob","fileReader","FileReader","resolve","reject","promise","readAsDataURL","onloadend","string","result","format","onerror","event","abort","ArrayBuffer","Uint8Array","Promise"],"mappings":"AAkBA,OAAOA,cAAP,MAA2B,iDAA3B;AACA,SAASC,YAAT;AAEA,IAAMC,KAAK,GAAG,mEAAd;;AAKA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACnB,MAAIC,GAAJ;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,MAAM,GAAG,EAAb;;AAEA,OACED,KAAK,GAAG,CAAR,EAAWD,CAAC,GAAG,CAAf,EAAkBD,GAAG,GAAGH,KAD1B,EAEEE,KAAK,CAACK,MAAN,CAAaH,CAAC,GAAG,CAAjB,MAAyBD,GAAG,GAAG,GAAP,EAAaC,CAAC,GAAG,CAAzC,CAFF,EAGEE,MAAM,IAAIH,GAAG,CAACI,MAAJ,CAAW,KAAMF,KAAK,IAAK,IAAKD,CAAC,GAAG,CAAL,GAAU,CAAzC,CAHZ,EAIE;AACA,QAAMI,QAAQ,GAAGN,KAAK,CAACO,UAAN,CAAkBL,CAAC,IAAI,IAAI,CAA3B,CAAjB;;AAEA,QAAII,QAAQ,GAAG,IAAf,EAAqB;AACnB,YAAM,IAAIE,KAAJ,CACJ,4GADI,CAAN;AAGD;;AAEDL,IAAAA,KAAK,GAAIA,KAAK,IAAI,CAAV,GAAeG,QAAvB;AACD;;AAED,SAAOF,MAAP;AACD;;AAKD,SAASK,IAAT,CAAcT,KAAd,EAAqB;AACnB,MAAIE,CAAC,GAAG,CAAR;AACA,MAAIQ,EAAE,GAAG,CAAT;AACA,MAAIC,EAAE,GAAG,CAAT;AACA,MAAIC,MAAJ;AACA,MAAIR,MAAM,GAAG,EAAb;AAEA,MAAMS,GAAG,GAAGb,KAAK,CAACc,OAAN,CAAc,OAAd,EAAuB,EAAvB,CAAZ;;AAEA,MAAID,GAAG,CAACE,MAAJ,GAAa,CAAb,KAAmB,CAAvB,EAA0B;AACxB,UAAM,IAAIP,KAAJ,CACJ,qFADI,CAAN;AAGD;;AAED,OACEE,EAAE,GAAG,CAAL,EAAQC,EAAE,GAAG,CAAb,EAAgBT,CAAC,GAAG,CADtB,EAEGU,MAAM,GAAGC,GAAG,CAACR,MAAJ,CAAWH,CAAC,EAAZ,CAFZ,EAGE,CAACU,MAAD,KAAaD,EAAE,GAAGD,EAAE,GAAG,CAAL,GAASC,EAAE,GAAG,EAAL,GAAUC,MAAnB,GAA4BA,MAAlC,EAA2CF,EAAE,KAAK,CAA9D,IACKN,MAAM,IAAIY,MAAM,CAACC,YAAP,CAAoB,MAAON,EAAE,KAAM,CAAC,CAAD,GAAKD,EAAN,GAAY,CAAjB,CAA7B,CADf,GAEI,CALN,EAME;AACAE,IAAAA,MAAM,GAAGd,KAAK,CAACoB,OAAN,CAAcN,MAAd,CAAT;AACD;;AAED,SAAOR,MAAP;AACD;;AAKD,SAASe,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,MAAIA,IAAI,YAAYC,IAApB,EAA0B;AACxB,QAAMC,UAAU,GAAG,IAAIC,UAAJ,EAAnB;;AACA,wBAAqC1B,YAAY,EAAjD;AAAA,QAAQ2B,OAAR,iBAAQA,OAAR;AAAA,QAAiBC,MAAjB,iBAAiBA,MAAjB;AAAA,QAAyBC,OAAzB,iBAAyBA,OAAzB;;AAEAJ,IAAAA,UAAU,CAACK,aAAX,CAAyBP,IAAzB;;AAEAE,IAAAA,UAAU,CAACM,SAAX,GAAuB,SAASA,SAAT,GAAqB;AAC1CJ,MAAAA,OAAO,CAAC;AAAEK,QAAAA,MAAM,EAAEP,UAAU,CAACQ,MAArB;AAA6BC,QAAAA,MAAM,EAAE;AAArC,OAAD,CAAP;AACD,KAFD;;AAIAT,IAAAA,UAAU,CAACU,OAAX,GAAqB,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;AAC3CX,MAAAA,UAAU,CAACY,KAAX;AACAT,MAAAA,MAAM,CAACQ,KAAD,CAAN;AACD,KAHD;;AAKA,WAAOP,OAAP;AACD;;AAED,MAAIN,IAAI,YAAYe,WAAhB,IAA+Bf,IAAI,YAAYgB,UAAnD,EAA+D;AAC7D,WAAOC,OAAO,CAACb,OAAR,CAAgB;AACrBK,MAAAA,MAAM,EAAEjC,cAAc,CAACwB,IAAD,CADD;AAErBW,MAAAA,MAAM,EAAE;AAFa,KAAhB,CAAP;AAID;;AAED,QAAM,IAAIvB,KAAJ,CAAU,yDAAV,CAAN;AACD;;AAED,eAAe;AACbT,EAAAA,IAAI,EAAJA,IADa;AAEbU,EAAAA,IAAI,EAAJA,IAFa;AAGbU,EAAAA,QAAQ,EAARA;AAHa,CAAf","sourcesContent":["/* eslint-disable no-bitwise */\n/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport binaryToBase64 from 'react-native/Libraries/Utilities/binaryToBase64';\nimport { promiseDefer } from './promise';\n\nconst CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n/**\n * window.btoa\n */\nfunction btoa(input) {\n  let map;\n  let i = 0;\n  let block = 0;\n  let output = '';\n\n  for (\n    block = 0, i = 0, map = CHARS;\n    input.charAt(i | 0) || ((map = '='), i % 1);\n    output += map.charAt(63 & (block >> (8 - (i % 1) * 8)))\n  ) {\n    const charCode = input.charCodeAt((i += 3 / 4));\n\n    if (charCode > 0xff) {\n      throw new Error(\n        \"'RNFirebase.Base64.btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\",\n      );\n    }\n\n    block = (block << 8) | charCode;\n  }\n\n  return output;\n}\n\n/**\n * window.atob\n */\nfunction atob(input) {\n  let i = 0;\n  let bc = 0;\n  let bs = 0;\n  let buffer;\n  let output = '';\n\n  const str = input.replace(/[=]+$/, '');\n\n  if (str.length % 4 === 1) {\n    throw new Error(\n      \"'RNFirebase.Base64.atob' failed: The string to be decoded is not correctly encoded.\",\n    );\n  }\n\n  for (\n    bc = 0, bs = 0, i = 0;\n    (buffer = str.charAt(i++));\n    ~buffer && ((bs = bc % 4 ? bs * 64 + buffer : buffer), bc++ % 4)\n      ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))\n      : 0\n  ) {\n    buffer = CHARS.indexOf(buffer);\n  }\n\n  return output;\n}\n\n/**\n * Converts a Blob, ArrayBuffer or Uint8Array to a base64 string.\n */\nfunction fromData(data) {\n  if (data instanceof Blob) {\n    const fileReader = new FileReader();\n    const { resolve, reject, promise } = promiseDefer();\n\n    fileReader.readAsDataURL(data);\n\n    fileReader.onloadend = function onloadend() {\n      resolve({ string: fileReader.result, format: 'data_url' });\n    };\n\n    fileReader.onerror = function onerror(event) {\n      fileReader.abort();\n      reject(event);\n    };\n\n    return promise;\n  }\n\n  if (data instanceof ArrayBuffer || data instanceof Uint8Array) {\n    return Promise.resolve({\n      string: binaryToBase64(data),\n      format: 'base64',\n    });\n  }\n\n  throw new Error(\"'RNFirebase.Base64.fromData' failed: Unknown data type.\");\n}\n\nexport default {\n  btoa,\n  atob,\n  fromData,\n};\n"]},"metadata":{},"sourceType":"module"}