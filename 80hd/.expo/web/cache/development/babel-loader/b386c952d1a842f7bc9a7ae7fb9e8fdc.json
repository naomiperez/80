{"ast":null,"code":"var deepMap = function deepMap(obj, fn) {\n  var deepMapper = function deepMapper(val) {\n    return isObject(val) ? deepMap(val, fn) : fn(val);\n  };\n\n  if (Array.isArray(obj)) {\n    return obj.map(deepMapper);\n  }\n\n  if (isObject(obj)) {\n    return mapObject(obj, deepMapper);\n  }\n\n  return obj;\n};\n\nvar mapObject = function mapObject(obj, fn) {\n  return Object.keys(obj).reduce(function (res, key) {\n    res[key] = fn(obj[key]);\n    return res;\n  }, {});\n};\n\nvar isObject = function isObject(myVar) {\n  return myVar && typeof myVar === 'object';\n};\n\nexport default deepMap;","map":{"version":3,"sources":["/Users/naomiperez/Documents/GitHub/80/80hd/node_modules/react-native-size-matters/lib/deep-map.js"],"names":["deepMap","obj","fn","deepMapper","val","isObject","Array","isArray","map","mapObject","Object","keys","reduce","res","key","myVar"],"mappings":"AAAA,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD,EAAMC,EAAN,EAAa;AACzB,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,GAAG;AAAA,WAAKC,QAAQ,CAACD,GAAD,CAAT,GAAkBJ,OAAO,CAACI,GAAD,EAAMF,EAAN,CAAzB,GAAqCA,EAAE,CAACE,GAAD,CAA3C;AAAA,GAAtB;;AACA,MAAIE,KAAK,CAACC,OAAN,CAAcN,GAAd,CAAJ,EAAwB;AACpB,WAAOA,GAAG,CAACO,GAAJ,CAAQL,UAAR,CAAP;AACH;;AACD,MAAIE,QAAQ,CAACJ,GAAD,CAAZ,EAAmB;AACf,WAAOQ,SAAS,CAACR,GAAD,EAAME,UAAN,CAAhB;AACH;;AACD,SAAOF,GAAP;AACH,CATD;;AAWA,IAAMQ,SAAS,GAAG,SAAZA,SAAY,CAACR,GAAD,EAAMC,EAAN;AAAA,SAAaQ,MAAM,CAACC,IAAP,CAAYV,GAAZ,EAAiBW,MAAjB,CAC3B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACVD,IAAAA,GAAG,CAACC,GAAD,CAAH,GAAWZ,EAAE,CAACD,GAAG,CAACa,GAAD,CAAJ,CAAb;AACA,WAAOD,GAAP;AACH,GAJ0B,EAIxB,EAJwB,CAAb;AAAA,CAAlB;;AAMA,IAAMR,QAAQ,GAAG,SAAXA,QAAW,CAAAU,KAAK;AAAA,SAAIA,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA9B;AAAA,CAAtB;;AAEA,eAAef,OAAf","sourcesContent":["const deepMap = (obj, fn) => {\n    const deepMapper = val => (isObject(val)) ? deepMap(val, fn) : fn(val);\n    if (Array.isArray(obj)) {\n        return obj.map(deepMapper);\n    }\n    if (isObject(obj)) {\n        return mapObject(obj, deepMapper);\n    }\n    return obj;\n};\n\nconst mapObject = (obj, fn) => Object.keys(obj).reduce(\n    (res, key) => {\n        res[key] = fn(obj[key]);\n        return res;\n    }, {});\n\nconst isObject = myVar => myVar && typeof myVar === 'object';\n\nexport default deepMap;\n"]},"metadata":{},"sourceType":"module"}