{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nexport function logMood(mood) {\n  console.log(\"Mood: \" + mood + \" Date: \" + date);\n  setMood(mood);\n  var data = formatLogData();\n  getTodayLog().then(function (todayRef) {\n    if (todayRef) {\n      console.log('todayRef: ' + todayRef);\n      todayRef.ref.update(data).then(function () {\n        console.log('Document successfully updated');\n      }).catch(function (error) {\n        console.error('Error updating document: ', error);\n      });\n    } else {\n      firebase.firestore().collection('moodLog').doc().set(data);\n    }\n  });\n}\nexport function getTodayLog(date) {\n  var db, formattedDate, todayRef;\n  return _regeneratorRuntime.async(function getTodayLog$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          db = firebase.firestore();\n          formattedDate = formatDate(date);\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(db.collection('moodLog').where('date', '==', formattedDate).get().then(function (querySnapshot) {\n            if (querySnapshot.docs.length === 0) {\n              console.log('No Documents from today');\n              return undefined;\n            } else if (querySnapshot.docs.length > 1) {\n              console.log('More than one document from today');\n            }\n\n            return querySnapshot.docs[0];\n          }).catch(function (error) {\n            console.log('Error getting documents: ', error);\n          }));\n\n        case 4:\n          todayRef = _context.sent;\n          return _context.abrupt(\"return\", todayRef);\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function formatLogData(date, mood, userRef, user) {\n  var day = date.getDay();\n  var formattedDate = formatDate(date);\n\n  if (userRef) {\n    console.log('userRef: ' + userRef);\n    var data = {\n      date: formattedDate,\n      mood: mood,\n      weekday: day,\n      user: userRef\n    };\n    return data;\n  } else {\n    var _user = props.user;\n    console.log('user: ' + _user);\n    var _data = {\n      date: formattedDate,\n      mood: mood,\n      weekday: day,\n      user: _user\n    };\n    return _data;\n  }\n}\n\nfunction formatDate(date) {\n  console.log(date);\n  var formattedDate = date.getFullYear().toString() + '-' + date.getMonth().toString() + '-' + date.getDate().toString();\n  return formattedDate;\n}","map":{"version":3,"sources":["/Users/naomiperez/Documents/GitHub/80/client/80hd/src/containers/HomeScreen/HandleData.js"],"names":["React","useState","firebase","logMood","mood","console","log","date","setMood","data","formatLogData","getTodayLog","then","todayRef","ref","update","catch","error","firestore","collection","doc","set","db","formattedDate","formatDate","where","get","querySnapshot","docs","length","undefined","userRef","user","day","getDay","weekday","props","getFullYear","toString","getMonth","getDate"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\n/********************/\nexport function logMood(mood) {\n    console.log(`Mood: ${mood} Date: ${date}`);\n\n    setMood(mood);\n\n    let data = formatLogData();\n    /* If user already has logged data for today, then update() \n            if not, then add() new document for today\n        */\n    getTodayLog().then((todayRef) => {\n      if (todayRef) {\n        console.log('todayRef: ' + todayRef);\n        todayRef.ref\n          .update(data)\n          .then(() => {\n            console.log('Document successfully updated');\n          })\n          .catch((error) => {\n            // The document probably doesn't exist.\n            console.error('Error updating document: ', error);\n          });\n      } else {\n        // New doc for 'today''s date\n        firebase.firestore().collection('moodLog').doc().set(data);\n      }\n    });\n  }\n\n/* Returns the data reference from today if it exists */\nexport async function getTodayLog(date) {\n    const db = firebase.firestore();\n\n    // If user has already logged something today, then get the document\n    // with today's date from the 'moodLog' Firestore collection\n    let formattedDate = formatDate(date);\n    const todayRef = await db\n      .collection('moodLog')\n      .where('date', '==', formattedDate)\n      .get()\n      .then((querySnapshot) => {\n        if (querySnapshot.docs.length === 0) {\n          console.log('No Documents from today');\n          return undefined;\n        } else if (querySnapshot.docs.length > 1) {\n          console.log('More than one document from today');\n        }\n\n        return querySnapshot.docs[0];\n        //  id & data properties\n      })\n      .catch((error) => {\n        console.log('Error getting documents: ', error);\n      });\n\n    return todayRef;\n  }\n\nexport function formatLogData(date, mood, userRef, user) {\n    /* Format date to pass to document.add() */\n    let day = date.getDay();\n    const formattedDate = formatDate(date);\n    /* Check if this component was returned by Registration/Login or App.js */\n    if (userRef) {\n      console.log('userRef: ' + userRef);\n      // Create new data for day and add it as a document\n      let data = {\n        date: formattedDate,\n        mood: mood,\n        weekday: day,\n        user: userRef,\n      };\n      return data;\n    } else {\n        // change this\n      let user = props.user;\n      console.log('user: ' + user);\n      let data = {\n        date: formattedDate,\n        mood: mood,\n        weekday: day,\n        user: user,\n      };\n      return data;\n    }\n  }\n\nfunction formatDate(date) {\n    console.log(date)\n    const formattedDate =\n      date.getFullYear().toString() +\n      '-' +\n      date.getMonth().toString() +\n      '-' +\n      date.getDate().toString();\n    return formattedDate;\n  }"]},"metadata":{},"sourceType":"module"}