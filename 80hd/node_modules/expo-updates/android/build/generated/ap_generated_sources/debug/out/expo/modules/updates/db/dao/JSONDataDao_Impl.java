package expo.modules.updates.db.dao;

import android.database.Cursor;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.SharedSQLiteStatement;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.sqlite.db.SupportSQLiteStatement;
import expo.modules.updates.db.Converters;
import expo.modules.updates.db.entity.JSONDataEntity;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

@SuppressWarnings({"unchecked", "deprecation"})
public final class JSONDataDao_Impl extends JSONDataDao {
  private final RoomDatabase __db;

  private final EntityInsertionAdapter __insertionAdapterOfJSONDataEntity;

  private final SharedSQLiteStatement __preparedStmtOf_deleteJSONDataForKey;

  public JSONDataDao_Impl(RoomDatabase __db) {
    this.__db = __db;
    this.__insertionAdapterOfJSONDataEntity = new EntityInsertionAdapter<JSONDataEntity>(__db) {
      @Override
      public String createQuery() {
        return "INSERT OR ABORT INTO `json_data`(`id`,`key`,`value`,`last_updated`,`scope_key`) VALUES (nullif(?, 0),?,?,?,?)";
      }

      @Override
      public void bind(SupportSQLiteStatement stmt, JSONDataEntity value) {
        stmt.bindLong(1, value.id);
        if (value.key == null) {
          stmt.bindNull(2);
        } else {
          stmt.bindString(2, value.key);
        }
        if (value.value == null) {
          stmt.bindNull(3);
        } else {
          stmt.bindString(3, value.value);
        }
        final Long _tmp;
        _tmp = Converters.dateToLong(value.lastUpdated);
        if (_tmp == null) {
          stmt.bindNull(4);
        } else {
          stmt.bindLong(4, _tmp);
        }
        if (value.scopeKey == null) {
          stmt.bindNull(5);
        } else {
          stmt.bindString(5, value.scopeKey);
        }
      }
    };
    this.__preparedStmtOf_deleteJSONDataForKey = new SharedSQLiteStatement(__db) {
      @Override
      public String createQuery() {
        final String _query = "DELETE FROM json_data WHERE `key` = ? AND scope_key = ?;";
        return _query;
      }
    };
  }

  @Override
  public void _insertJSONData(final JSONDataEntity jsonDataEntity) {
    __db.assertNotSuspendingTransaction();
    __db.beginTransaction();
    try {
      __insertionAdapterOfJSONDataEntity.insert(jsonDataEntity);
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public void setJSONStringForKey(final String key, final String value, final String scopeKey) {
    __db.beginTransaction();
    try {
      JSONDataDao_Impl.super.setJSONStringForKey(key, value, scopeKey);
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public void setMultipleFields(final Map<String, String> fields, final String scopeKey) {
    __db.beginTransaction();
    try {
      JSONDataDao_Impl.super.setMultipleFields(fields, scopeKey);
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public void _deleteJSONDataForKey(final String key, final String scopeKey) {
    __db.assertNotSuspendingTransaction();
    final SupportSQLiteStatement _stmt = __preparedStmtOf_deleteJSONDataForKey.acquire();
    int _argIndex = 1;
    if (key == null) {
      _stmt.bindNull(_argIndex);
    } else {
      _stmt.bindString(_argIndex, key);
    }
    _argIndex = 2;
    if (scopeKey == null) {
      _stmt.bindNull(_argIndex);
    } else {
      _stmt.bindString(_argIndex, scopeKey);
    }
    __db.beginTransaction();
    try {
      _stmt.executeUpdateDelete();
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
      __preparedStmtOf_deleteJSONDataForKey.release(_stmt);
    }
  }

  @Override
  public List<JSONDataEntity> _loadJSONDataForKey(final String key, final String scopeKey) {
    final String _sql = "SELECT * FROM json_data WHERE `key` = ? AND scope_key = ? ORDER BY last_updated DESC LIMIT 1;";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 2);
    int _argIndex = 1;
    if (key == null) {
      _statement.bindNull(_argIndex);
    } else {
      _statement.bindString(_argIndex, key);
    }
    _argIndex = 2;
    if (scopeKey == null) {
      _statement.bindNull(_argIndex);
    } else {
      _statement.bindString(_argIndex, scopeKey);
    }
    __db.assertNotSuspendingTransaction();
    final Cursor _cursor = DBUtil.query(__db, _statement, false);
    try {
      final int _cursorIndexOfId = CursorUtil.getColumnIndexOrThrow(_cursor, "id");
      final int _cursorIndexOfKey = CursorUtil.getColumnIndexOrThrow(_cursor, "key");
      final int _cursorIndexOfValue = CursorUtil.getColumnIndexOrThrow(_cursor, "value");
      final int _cursorIndexOfLastUpdated = CursorUtil.getColumnIndexOrThrow(_cursor, "last_updated");
      final int _cursorIndexOfScopeKey = CursorUtil.getColumnIndexOrThrow(_cursor, "scope_key");
      final List<JSONDataEntity> _result = new ArrayList<JSONDataEntity>(_cursor.getCount());
      while(_cursor.moveToNext()) {
        final JSONDataEntity _item;
        final String _tmpKey;
        _tmpKey = _cursor.getString(_cursorIndexOfKey);
        final String _tmpValue;
        _tmpValue = _cursor.getString(_cursorIndexOfValue);
        final Date _tmpLastUpdated;
        final Long _tmp;
        if (_cursor.isNull(_cursorIndexOfLastUpdated)) {
          _tmp = null;
        } else {
          _tmp = _cursor.getLong(_cursorIndexOfLastUpdated);
        }
        _tmpLastUpdated = Converters.longToDate(_tmp);
        final String _tmpScopeKey;
        _tmpScopeKey = _cursor.getString(_cursorIndexOfScopeKey);
        _item = new JSONDataEntity(_tmpKey,_tmpValue,_tmpLastUpdated,_tmpScopeKey);
        _item.id = _cursor.getLong(_cursorIndexOfId);
        _result.add(_item);
      }
      return _result;
    } finally {
      _cursor.close();
      _statement.release();
    }
  }
}
