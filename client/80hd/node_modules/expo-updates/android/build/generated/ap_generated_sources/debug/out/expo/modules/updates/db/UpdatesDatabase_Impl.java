package expo.modules.updates.db;

import androidx.room.DatabaseConfiguration;
import androidx.room.InvalidationTracker;
import androidx.room.RoomOpenHelper;
import androidx.room.RoomOpenHelper.Delegate;
import androidx.room.util.DBUtil;
import androidx.room.util.TableInfo;
import androidx.room.util.TableInfo.Column;
import androidx.room.util.TableInfo.ForeignKey;
import androidx.room.util.TableInfo.Index;
import androidx.sqlite.db.SupportSQLiteDatabase;
import androidx.sqlite.db.SupportSQLiteOpenHelper;
import androidx.sqlite.db.SupportSQLiteOpenHelper.Callback;
import androidx.sqlite.db.SupportSQLiteOpenHelper.Configuration;
import expo.modules.updates.db.dao.AssetDao;
import expo.modules.updates.db.dao.AssetDao_Impl;
import expo.modules.updates.db.dao.JSONDataDao;
import expo.modules.updates.db.dao.JSONDataDao_Impl;
import expo.modules.updates.db.dao.UpdateDao;
import expo.modules.updates.db.dao.UpdateDao_Impl;
import java.lang.IllegalStateException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

@SuppressWarnings({"unchecked", "deprecation"})
public final class UpdatesDatabase_Impl extends UpdatesDatabase {
  private volatile UpdateDao _updateDao;

  private volatile AssetDao _assetDao;

  private volatile JSONDataDao _jSONDataDao;

  @Override
  protected SupportSQLiteOpenHelper createOpenHelper(DatabaseConfiguration configuration) {
    final SupportSQLiteOpenHelper.Callback _openCallback = new RoomOpenHelper(configuration, new RoomOpenHelper.Delegate(5) {
      @Override
      public void createAllTables(SupportSQLiteDatabase _db) {
        _db.execSQL("CREATE TABLE IF NOT EXISTS `updates` (`id` BLOB NOT NULL, `scope_key` TEXT NOT NULL, `commit_time` INTEGER NOT NULL, `runtime_version` TEXT NOT NULL, `launch_asset_id` INTEGER, `metadata` TEXT, `status` INTEGER NOT NULL, `keep` INTEGER NOT NULL, PRIMARY KEY(`id`), FOREIGN KEY(`launch_asset_id`) REFERENCES `assets`(`id`) ON UPDATE NO ACTION ON DELETE CASCADE )");
        _db.execSQL("CREATE  INDEX `index_updates_launch_asset_id` ON `updates` (`launch_asset_id`)");
        _db.execSQL("CREATE UNIQUE INDEX `index_updates_scope_key_commit_time` ON `updates` (`scope_key`, `commit_time`)");
        _db.execSQL("CREATE TABLE IF NOT EXISTS `updates_assets` (`update_id` BLOB NOT NULL, `asset_id` INTEGER NOT NULL, PRIMARY KEY(`update_id`, `asset_id`), FOREIGN KEY(`update_id`) REFERENCES `updates`(`id`) ON UPDATE NO ACTION ON DELETE CASCADE , FOREIGN KEY(`asset_id`) REFERENCES `assets`(`id`) ON UPDATE NO ACTION ON DELETE CASCADE )");
        _db.execSQL("CREATE  INDEX `index_updates_assets_asset_id` ON `updates_assets` (`asset_id`)");
        _db.execSQL("CREATE TABLE IF NOT EXISTS `assets` (`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `url` TEXT, `key` TEXT, `headers` TEXT, `type` TEXT NOT NULL, `metadata` TEXT, `download_time` INTEGER, `relative_path` TEXT, `hash` BLOB, `hash_type` INTEGER NOT NULL, `marked_for_deletion` INTEGER NOT NULL)");
        _db.execSQL("CREATE UNIQUE INDEX `index_assets_key` ON `assets` (`key`)");
        _db.execSQL("CREATE TABLE IF NOT EXISTS `json_data` (`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `key` TEXT NOT NULL, `value` TEXT NOT NULL, `last_updated` INTEGER NOT NULL, `scope_key` TEXT NOT NULL)");
        _db.execSQL("CREATE  INDEX `index_json_data_scope_key` ON `json_data` (`scope_key`)");
        _db.execSQL("CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)");
        _db.execSQL("INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, 'd980514a0729c66ac31d3ca19e2ac9c8')");
      }

      @Override
      public void dropAllTables(SupportSQLiteDatabase _db) {
        _db.execSQL("DROP TABLE IF EXISTS `updates`");
        _db.execSQL("DROP TABLE IF EXISTS `updates_assets`");
        _db.execSQL("DROP TABLE IF EXISTS `assets`");
        _db.execSQL("DROP TABLE IF EXISTS `json_data`");
      }

      @Override
      protected void onCreate(SupportSQLiteDatabase _db) {
        if (mCallbacks != null) {
          for (int _i = 0, _size = mCallbacks.size(); _i < _size; _i++) {
            mCallbacks.get(_i).onCreate(_db);
          }
        }
      }

      @Override
      public void onOpen(SupportSQLiteDatabase _db) {
        mDatabase = _db;
        _db.execSQL("PRAGMA foreign_keys = ON");
        internalInitInvalidationTracker(_db);
        if (mCallbacks != null) {
          for (int _i = 0, _size = mCallbacks.size(); _i < _size; _i++) {
            mCallbacks.get(_i).onOpen(_db);
          }
        }
      }

      @Override
      public void onPreMigrate(SupportSQLiteDatabase _db) {
        DBUtil.dropFtsSyncTriggers(_db);
      }

      @Override
      public void onPostMigrate(SupportSQLiteDatabase _db) {
      }

      @Override
      protected void validateMigration(SupportSQLiteDatabase _db) {
        final HashMap<String, TableInfo.Column> _columnsUpdates = new HashMap<String, TableInfo.Column>(8);
        _columnsUpdates.put("id", new TableInfo.Column("id", "BLOB", true, 1));
        _columnsUpdates.put("scope_key", new TableInfo.Column("scope_key", "TEXT", true, 0));
        _columnsUpdates.put("commit_time", new TableInfo.Column("commit_time", "INTEGER", true, 0));
        _columnsUpdates.put("runtime_version", new TableInfo.Column("runtime_version", "TEXT", true, 0));
        _columnsUpdates.put("launch_asset_id", new TableInfo.Column("launch_asset_id", "INTEGER", false, 0));
        _columnsUpdates.put("metadata", new TableInfo.Column("metadata", "TEXT", false, 0));
        _columnsUpdates.put("status", new TableInfo.Column("status", "INTEGER", true, 0));
        _columnsUpdates.put("keep", new TableInfo.Column("keep", "INTEGER", true, 0));
        final HashSet<TableInfo.ForeignKey> _foreignKeysUpdates = new HashSet<TableInfo.ForeignKey>(1);
        _foreignKeysUpdates.add(new TableInfo.ForeignKey("assets", "CASCADE", "NO ACTION",Arrays.asList("launch_asset_id"), Arrays.asList("id")));
        final HashSet<TableInfo.Index> _indicesUpdates = new HashSet<TableInfo.Index>(2);
        _indicesUpdates.add(new TableInfo.Index("index_updates_launch_asset_id", false, Arrays.asList("launch_asset_id")));
        _indicesUpdates.add(new TableInfo.Index("index_updates_scope_key_commit_time", true, Arrays.asList("scope_key","commit_time")));
        final TableInfo _infoUpdates = new TableInfo("updates", _columnsUpdates, _foreignKeysUpdates, _indicesUpdates);
        final TableInfo _existingUpdates = TableInfo.read(_db, "updates");
        if (! _infoUpdates.equals(_existingUpdates)) {
          throw new IllegalStateException("Migration didn't properly handle updates(expo.modules.updates.db.entity.UpdateEntity).\n"
                  + " Expected:\n" + _infoUpdates + "\n"
                  + " Found:\n" + _existingUpdates);
        }
        final HashMap<String, TableInfo.Column> _columnsUpdatesAssets = new HashMap<String, TableInfo.Column>(2);
        _columnsUpdatesAssets.put("update_id", new TableInfo.Column("update_id", "BLOB", true, 1));
        _columnsUpdatesAssets.put("asset_id", new TableInfo.Column("asset_id", "INTEGER", true, 2));
        final HashSet<TableInfo.ForeignKey> _foreignKeysUpdatesAssets = new HashSet<TableInfo.ForeignKey>(2);
        _foreignKeysUpdatesAssets.add(new TableInfo.ForeignKey("updates", "CASCADE", "NO ACTION",Arrays.asList("update_id"), Arrays.asList("id")));
        _foreignKeysUpdatesAssets.add(new TableInfo.ForeignKey("assets", "CASCADE", "NO ACTION",Arrays.asList("asset_id"), Arrays.asList("id")));
        final HashSet<TableInfo.Index> _indicesUpdatesAssets = new HashSet<TableInfo.Index>(1);
        _indicesUpdatesAssets.add(new TableInfo.Index("index_updates_assets_asset_id", false, Arrays.asList("asset_id")));
        final TableInfo _infoUpdatesAssets = new TableInfo("updates_assets", _columnsUpdatesAssets, _foreignKeysUpdatesAssets, _indicesUpdatesAssets);
        final TableInfo _existingUpdatesAssets = TableInfo.read(_db, "updates_assets");
        if (! _infoUpdatesAssets.equals(_existingUpdatesAssets)) {
          throw new IllegalStateException("Migration didn't properly handle updates_assets(expo.modules.updates.db.entity.UpdateAssetEntity).\n"
                  + " Expected:\n" + _infoUpdatesAssets + "\n"
                  + " Found:\n" + _existingUpdatesAssets);
        }
        final HashMap<String, TableInfo.Column> _columnsAssets = new HashMap<String, TableInfo.Column>(11);
        _columnsAssets.put("id", new TableInfo.Column("id", "INTEGER", true, 1));
        _columnsAssets.put("url", new TableInfo.Column("url", "TEXT", false, 0));
        _columnsAssets.put("key", new TableInfo.Column("key", "TEXT", false, 0));
        _columnsAssets.put("headers", new TableInfo.Column("headers", "TEXT", false, 0));
        _columnsAssets.put("type", new TableInfo.Column("type", "TEXT", true, 0));
        _columnsAssets.put("metadata", new TableInfo.Column("metadata", "TEXT", false, 0));
        _columnsAssets.put("download_time", new TableInfo.Column("download_time", "INTEGER", false, 0));
        _columnsAssets.put("relative_path", new TableInfo.Column("relative_path", "TEXT", false, 0));
        _columnsAssets.put("hash", new TableInfo.Column("hash", "BLOB", false, 0));
        _columnsAssets.put("hash_type", new TableInfo.Column("hash_type", "INTEGER", true, 0));
        _columnsAssets.put("marked_for_deletion", new TableInfo.Column("marked_for_deletion", "INTEGER", true, 0));
        final HashSet<TableInfo.ForeignKey> _foreignKeysAssets = new HashSet<TableInfo.ForeignKey>(0);
        final HashSet<TableInfo.Index> _indicesAssets = new HashSet<TableInfo.Index>(1);
        _indicesAssets.add(new TableInfo.Index("index_assets_key", true, Arrays.asList("key")));
        final TableInfo _infoAssets = new TableInfo("assets", _columnsAssets, _foreignKeysAssets, _indicesAssets);
        final TableInfo _existingAssets = TableInfo.read(_db, "assets");
        if (! _infoAssets.equals(_existingAssets)) {
          throw new IllegalStateException("Migration didn't properly handle assets(expo.modules.updates.db.entity.AssetEntity).\n"
                  + " Expected:\n" + _infoAssets + "\n"
                  + " Found:\n" + _existingAssets);
        }
        final HashMap<String, TableInfo.Column> _columnsJsonData = new HashMap<String, TableInfo.Column>(5);
        _columnsJsonData.put("id", new TableInfo.Column("id", "INTEGER", true, 1));
        _columnsJsonData.put("key", new TableInfo.Column("key", "TEXT", true, 0));
        _columnsJsonData.put("value", new TableInfo.Column("value", "TEXT", true, 0));
        _columnsJsonData.put("last_updated", new TableInfo.Column("last_updated", "INTEGER", true, 0));
        _columnsJsonData.put("scope_key", new TableInfo.Column("scope_key", "TEXT", true, 0));
        final HashSet<TableInfo.ForeignKey> _foreignKeysJsonData = new HashSet<TableInfo.ForeignKey>(0);
        final HashSet<TableInfo.Index> _indicesJsonData = new HashSet<TableInfo.Index>(1);
        _indicesJsonData.add(new TableInfo.Index("index_json_data_scope_key", false, Arrays.asList("scope_key")));
        final TableInfo _infoJsonData = new TableInfo("json_data", _columnsJsonData, _foreignKeysJsonData, _indicesJsonData);
        final TableInfo _existingJsonData = TableInfo.read(_db, "json_data");
        if (! _infoJsonData.equals(_existingJsonData)) {
          throw new IllegalStateException("Migration didn't properly handle json_data(expo.modules.updates.db.entity.JSONDataEntity).\n"
                  + " Expected:\n" + _infoJsonData + "\n"
                  + " Found:\n" + _existingJsonData);
        }
      }
    }, "d980514a0729c66ac31d3ca19e2ac9c8", "d5274666a4acbfee245e177e80f41995");
    final SupportSQLiteOpenHelper.Configuration _sqliteConfig = SupportSQLiteOpenHelper.Configuration.builder(configuration.context)
        .name(configuration.name)
        .callback(_openCallback)
        .build();
    final SupportSQLiteOpenHelper _helper = configuration.sqliteOpenHelperFactory.create(_sqliteConfig);
    return _helper;
  }

  @Override
  protected InvalidationTracker createInvalidationTracker() {
    final HashMap<String, String> _shadowTablesMap = new HashMap<String, String>(0);
    HashMap<String, Set<String>> _viewTables = new HashMap<String, Set<String>>(0);
    return new InvalidationTracker(this, _shadowTablesMap, _viewTables, "updates","updates_assets","assets","json_data");
  }

  @Override
  public void clearAllTables() {
    super.assertNotMainThread();
    final SupportSQLiteDatabase _db = super.getOpenHelper().getWritableDatabase();
    boolean _supportsDeferForeignKeys = android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP;
    try {
      if (!_supportsDeferForeignKeys) {
        _db.execSQL("PRAGMA foreign_keys = FALSE");
      }
      super.beginTransaction();
      if (_supportsDeferForeignKeys) {
        _db.execSQL("PRAGMA defer_foreign_keys = TRUE");
      }
      _db.execSQL("DELETE FROM `updates`");
      _db.execSQL("DELETE FROM `updates_assets`");
      _db.execSQL("DELETE FROM `assets`");
      _db.execSQL("DELETE FROM `json_data`");
      super.setTransactionSuccessful();
    } finally {
      super.endTransaction();
      if (!_supportsDeferForeignKeys) {
        _db.execSQL("PRAGMA foreign_keys = TRUE");
      }
      _db.query("PRAGMA wal_checkpoint(FULL)").close();
      if (!_db.inTransaction()) {
        _db.execSQL("VACUUM");
      }
    }
  }

  @Override
  public UpdateDao updateDao() {
    if (_updateDao != null) {
      return _updateDao;
    } else {
      synchronized(this) {
        if(_updateDao == null) {
          _updateDao = new UpdateDao_Impl(this);
        }
        return _updateDao;
      }
    }
  }

  @Override
  public AssetDao assetDao() {
    if (_assetDao != null) {
      return _assetDao;
    } else {
      synchronized(this) {
        if(_assetDao == null) {
          _assetDao = new AssetDao_Impl(this);
        }
        return _assetDao;
      }
    }
  }

  @Override
  public JSONDataDao jsonDataDao() {
    if (_jSONDataDao != null) {
      return _jSONDataDao;
    } else {
      synchronized(this) {
        if(_jSONDataDao == null) {
          _jSONDataDao = new JSONDataDao_Impl(this);
        }
        return _jSONDataDao;
      }
    }
  }
}
