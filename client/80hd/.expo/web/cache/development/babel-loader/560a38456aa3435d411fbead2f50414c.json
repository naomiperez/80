{"ast":null,"code":"var _jsxFileName = \"/Users/naomiperez/Documents/GitHub/80/client/80hd/src/containers/Home.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Calendar from \"../modules/calendar/Calendar\";\nimport Mood from \"../components/Mood\";\nimport Theme from \"../styles/colors\";\nimport LoggerView from \"../components/LoggerView\";\nimport firebase from \"firebase/app\";\nimport 'firebase/firestore';\nimport 'firebase/auth';\nvar today = new Date().toDateString();\nvar moodInit = 10;\nvar user = {\n  name: 'Naomi'\n};\n\nfunction Home(props) {\n  var date;\n  var mood;\n  var user = props.user;\n\n  function getTodayLog() {\n    var db, todayRef;\n    return _regeneratorRuntime.async(function getTodayLog$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            db = firebase.firestore();\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(db.collection('moodLog').where(\"timestamp\", \"==\", date).get().then(function (querySnapshot) {\n              if (querySnapshot.docs.length === 0) {\n                console.log(\"No Documents from today\");\n                return undefined;\n              } else if (querySnapshot.docs.length > 1) {\n                console.log(\"More than one document from today\");\n              }\n\n              return querySnapshot.docs[0];\n            }).catch(function (error) {\n              console.log(\"Error getting documents: \", error);\n            }));\n\n          case 3:\n            todayRef = _context.sent;\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function logMood(mood) {\n    console.log(\"Mood: \" + mood + \" Date: \" + date);\n    var data = {\n      date: date,\n      mood: mood,\n      weekday: date.getDay(),\n      user: user\n    };\n\n    if (todayDoc) {\n      todayDoc.ref.update({\n        mood: mood\n      }).then(function () {\n        console.log(\"Document successfully updated\");\n      }).catch(function (error) {\n        console.error(\"Error updating document: \", error);\n      });\n    } else {\n      console.log(\"Something went wrong with collection/doc query.\");\n    }\n  }\n\n  function logDate(obj) {\n    console.log(obj.date);\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, React.createElement(Calendar, {\n    date: date,\n    logDate: logDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }), React.createElement(LoggerView, {\n    selector: React.createElement(Mood, {\n      mood: mood,\n      logMood: logMood,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 35\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Theme.cream\n  }\n});\nexport default Home;","map":{"version":3,"sources":["/Users/naomiperez/Documents/GitHub/80/client/80hd/src/containers/Home.js"],"names":["React","useState","Calendar","Mood","Theme","LoggerView","firebase","today","Date","toDateString","moodInit","user","name","Home","props","date","mood","getTodayLog","db","firestore","collection","where","get","then","querySnapshot","docs","length","console","log","undefined","catch","error","todayRef","logMood","data","weekday","getDay","todayDoc","ref","update","logDate","obj","styles","container","StyleSheet","create","flex","backgroundColor","cream"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport Calendar from '../modules/calendar/Calendar'\nimport Mood from '../components/Mood'\nimport Theme from '../styles/colors'\nimport LoggerView from '../components/LoggerView'\nimport firebase from \"firebase/app\"\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\nconst today = new Date().toDateString();\nconst moodInit = 10;\n\nconst user = {\n    name: 'Naomi'\n}\n\nfunction Home(props) {\n    // Use state variables to store date and mood\n    // const [mood, setMood] = useState(moodInit)\n    // const [date, setDate] = useState(today)\n    let date;\n    let mood;\n\n    const user = props.user\n\n    async function getTodayLog(){\n        const db = firebase.firestore()\n\n        // If user has already logged something today, then get the document\n        // with today's date from the 'moodLog' Firestore collection\n\n        const todayRef = await db.collection('moodLog').where(\"timestamp\", \"==\", date).get()\n        .then(querySnapshot => {\n            if (querySnapshot.docs.length === 0) {\n                console.log(\"No Documents from today\")\n                return undefined\n            } else if (querySnapshot.docs.length > 1) {\n                console.log(\"More than one document from today\")\n            }\n\n            return querySnapshot.docs[0]\n            //  id & data properties\n        })\n        .catch((error) => {\n            console.log(\"Error getting documents: \", error);\n        });\n\n    }\n\n    /********************/\n    function logMood(mood) {\n        console.log(`Mood: ${mood} Date: ${date}`)\n\n        // Create new data for day and add it as a document\n        let data = {\n            date: date,\n            mood: mood,\n            weekday: date.getDay(),\n            user: user\n        }\n        // If we are changing the mood that was previously logged \n        // i.e. (document for today already exists)\n        if (todayDoc) {\n            todayDoc.ref.update({\n                mood: mood\n            }).then(() => {\n                console.log(\"Document successfully updated\");\n            }).catch((error) => {\n                // The document probably doesn't exist.\n                console.error(\"Error updating document: \", error);\n            });\n        } else {\n            console.log(\"Something went wrong with collection/doc query.\")\n        }\n    }\n\n    function logDate(obj) {\n        console.log(obj.date)\n        // setDate(obj.date)\n    }\n\n    return (\n\n        <View style={styles.container}>\n            {/* import the context and pass along the data */}\n            <Calendar date={date} logDate={logDate} />\n            <LoggerView selector={<Mood mood={mood} logMood={logMood} />} />\n        </View>\n    );\n}\n\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: Theme.cream\n    }\n});\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}