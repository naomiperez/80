{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/naomiperez/Documents/GitHub/80/client/80hd/src/containers/RegistrationScreen/Registration.js\";\nimport React, { useState } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nimport styles from \"../LoginScreen/styles\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport { firebaseConfig } from \"../../firebase/config\";\nimport { CurrentUserProvider, useCurrentUser } from \"../../CurrentUserContext\";\nexport default function Registration(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      fullName = _useState2[0],\n      setFullName = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      email = _useState4[0],\n      setEmail = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      password = _useState6[0],\n      setPassword = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      confirmPassword = _useState8[0],\n      setConfirmPassword = _useState8[1];\n\n  var onFooterLinkPress = function onFooterLinkPress() {\n    navigation.navigate('Login');\n  };\n\n  var onRegisterPress = function onRegisterPress() {\n    if (password !== confirmPassword) {\n      alert(\"Passwords don't match.\");\n      return;\n    }\n\n    firebase.auth().createUserWithEmailAndPassword(email, password).then(function (response) {\n      var uid = response.user.uid;\n      var data = {\n        id: uid,\n        email: email,\n        fullName: fullName\n      };\n      var db = firebase.firestore();\n      var usersRef = db.collection('users');\n      usersRef.doc(uid).set(data).then(function () {\n        navigation.navigate('Home', {\n          user: data\n        });\n      }).catch(function (error) {\n        alert(error);\n      });\n    }).catch(function (error) {\n      alert(error);\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, React.createElement(KeyboardAwareScrollView, {\n    style: {\n      flex: 1,\n      width: '100%'\n    },\n    keyboardShouldPersistTaps: \"always\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, React.createElement(Image, {\n    style: styles.logo,\n    source: require(\"../../assets/images/icon.png\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }), React.createElement(TextInput, {\n    style: styles.input,\n    placeholder: \"Full Name\",\n    placeholderTextColor: \"#aaaaaa\",\n    onChangeText: function onChangeText(text) {\n      return setFullName(text);\n    },\n    value: fullName,\n    underlineColorAndroid: \"transparent\",\n    autoCapitalize: \"none\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), React.createElement(TextInput, {\n    style: styles.input,\n    placeholder: \"E-mail\",\n    placeholderTextColor: \"#aaaaaa\",\n    onChangeText: function onChangeText(text) {\n      return setEmail(text);\n    },\n    value: email,\n    underlineColorAndroid: \"transparent\",\n    autoCapitalize: \"none\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }), React.createElement(TextInput, {\n    style: styles.input,\n    placeholderTextColor: \"#aaaaaa\",\n    secureTextEntry: true,\n    placeholder: \"Password\",\n    onChangeText: function onChangeText(text) {\n      return setPassword(text);\n    },\n    value: password,\n    underlineColorAndroid: \"transparent\",\n    autoCapitalize: \"none\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }), React.createElement(TextInput, {\n    style: styles.input,\n    placeholderTextColor: \"#aaaaaa\",\n    secureTextEntry: true,\n    placeholder: \"Confirm Password\",\n    onChangeText: function onChangeText(text) {\n      return setConfirmPassword(text);\n    },\n    value: confirmPassword,\n    underlineColorAndroid: \"transparent\",\n    autoCapitalize: \"none\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: function onPress() {\n      return onRegisterPress();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, \"Create account\")), React.createElement(View, {\n    style: styles.footerView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.footerText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, \"Already got an account?\", ' ', React.createElement(Text, {\n    onPress: onFooterLinkPress,\n    style: styles.footerLink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, \"Log in\")))));\n}","map":{"version":3,"sources":["/Users/naomiperez/Documents/GitHub/80/client/80hd/src/containers/RegistrationScreen/Registration.js"],"names":["React","useState","KeyboardAwareScrollView","styles","firebase","firebaseConfig","CurrentUserProvider","useCurrentUser","Registration","navigation","fullName","setFullName","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","onFooterLinkPress","navigate","onRegisterPress","alert","auth","createUserWithEmailAndPassword","then","response","uid","user","data","id","db","firestore","usersRef","collection","doc","set","catch","error","container","flex","width","logo","require","input","text","button","buttonTitle","footerView","footerText","footerLink"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Image, Text, TextInput, TouchableOpacity, View } from 'react-native';\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nimport styles from '../LoginScreen/styles';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport { firebaseConfig } from '../../firebase/config';\nimport { CurrentUserProvider, useCurrentUser } from '../../CurrentUserContext';\n\nexport default function Registration({ navigation }) {\n  const [fullName, setFullName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n\n  const onFooterLinkPress = () => {\n    navigation.navigate('Login');\n  };\n\n  // Add new user to database\n  const onRegisterPress = () => {\n    if (password !== confirmPassword) {\n      alert(\"Passwords don't match.\");\n      return;\n    }\n\n    // call Firebase Auth’s createUserWithEmailAndPassword API\n    // to create a new account that will show up in Firebase Console\n\n    // store the user data in Firebase Firestore\n    // (necessary for storing extra user information, such as full name, profile photo URL, and so on, which cannot be stored in the Authentication table)\n    firebase\n      .auth()\n      .createUserWithEmailAndPassword(email, password)\n      .then((response) => {\n        const uid = response.user.uid;\n        const data = {\n          id: uid,\n          email: email,\n          fullName: fullName,\n        };\n\n        const db = firebase.firestore();\n        const usersRef = db.collection('users');\n        usersRef\n          .doc(uid)\n          .set(data)\n          .then(() => {\n            // If registration was successful, we navigate to the Home Screen, by passing in the user object data as well\n            navigation.navigate('Home', { user: data });\n          })\n          .catch((error) => {\n            // If error occurs, show an alert with it\n            alert(error);\n          });\n      })\n      .catch((error) => {\n        alert(error);\n      });\n  };\n\n  return (\n    <View style={styles.container}>\n      <KeyboardAwareScrollView\n        style={{ flex: 1, width: '100%' }}\n        keyboardShouldPersistTaps=\"always\">\n        <Image style={styles.logo} source={require('../../assets/images/icon.png')} />\n        <TextInput\n          style={styles.input}\n          placeholder=\"Full Name\"\n          placeholderTextColor=\"#aaaaaa\"\n          onChangeText={(text) => setFullName(text)}\n          value={fullName}\n          underlineColorAndroid=\"transparent\"\n          autoCapitalize=\"none\"\n        />\n        <TextInput\n          style={styles.input}\n          placeholder=\"E-mail\"\n          placeholderTextColor=\"#aaaaaa\"\n          onChangeText={(text) => setEmail(text)}\n          value={email}\n          underlineColorAndroid=\"transparent\"\n          autoCapitalize=\"none\"\n        />\n        <TextInput\n          style={styles.input}\n          placeholderTextColor=\"#aaaaaa\"\n          secureTextEntry\n          placeholder=\"Password\"\n          onChangeText={(text) => setPassword(text)}\n          value={password}\n          underlineColorAndroid=\"transparent\"\n          autoCapitalize=\"none\"\n        />\n        <TextInput\n          style={styles.input}\n          placeholderTextColor=\"#aaaaaa\"\n          secureTextEntry\n          placeholder=\"Confirm Password\"\n          onChangeText={(text) => setConfirmPassword(text)}\n          value={confirmPassword}\n          underlineColorAndroid=\"transparent\"\n          autoCapitalize=\"none\"\n        />\n        <TouchableOpacity style={styles.button} onPress={() => onRegisterPress()}>\n          <Text style={styles.buttonTitle}>Create account</Text>\n        </TouchableOpacity>\n        <View style={styles.footerView}>\n          <Text style={styles.footerText}>\n            Already got an account?{' '}\n            <Text onPress={onFooterLinkPress} style={styles.footerLink}>\n              Log in\n            </Text>\n          </Text>\n        </View>\n      </KeyboardAwareScrollView>\n    </View>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}