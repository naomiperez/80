{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/naomiperez/Documents/GitHub/80/client/80hd/node_modules/react-native-calendar-strip/src/Scroller.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport PropTypes from \"prop-types\";\nimport { RecyclerListView, DataProvider, LayoutProvider } from \"recyclerlistview\";\nimport moment from \"moment\";\n\nvar CalendarScroller = function (_Component) {\n  _inherits(CalendarScroller, _Component);\n\n  var _super = _createSuper(CalendarScroller);\n\n  function CalendarScroller(props) {\n    var _this;\n\n    _classCallCheck(this, CalendarScroller);\n\n    _this = _super.call(this, props);\n\n    _this.scrollLeft = function () {\n      if (_this.state.visibleStartIndex === 0) {\n        return;\n      }\n\n      var newIndex = Math.max(_this.state.visibleStartIndex - _this.state.numVisibleItems, 0);\n\n      _this.rlv.scrollToIndex(newIndex, true);\n    };\n\n    _this.scrollRight = function () {\n      var newIndex = _this.state.visibleStartIndex + _this.state.numVisibleItems;\n\n      if (newIndex >= _this.state.numDays - 1) {\n        _this.rlv.scrollToEnd(true);\n\n        return;\n      }\n\n      _this.rlv.scrollToIndex(newIndex, true);\n    };\n\n    _this.scrollToDate = function (date) {\n      var targetDate = moment(date).subtract(Math.round(_this.state.numVisibleItems / 2) - 1, \"days\");\n      var _this$props = _this.props,\n          minDate = _this$props.minDate,\n          maxDate = _this$props.maxDate;\n\n      if (minDate && targetDate.isBefore(minDate, \"day\")) {\n        targetDate = minDate;\n      } else if (maxDate && targetDate.isAfter(maxDate, \"day\")) {\n        targetDate = maxDate;\n      }\n\n      for (var i = 0; i < _this.state.data.length; i++) {\n        if (_this.state.data[i].date.isSame(targetDate, \"day\")) {\n          _this.rlv.scrollToIndex(i, true);\n\n          break;\n        }\n      }\n    };\n\n    _this.shiftDaysForward = function () {\n      var visibleStartDate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.visibleStartDate;\n      var prevVisStart = visibleStartDate.clone();\n      var newStartDate = prevVisStart.clone().subtract(Math.floor(_this.state.numDays / 3), \"days\");\n\n      _this.updateDays(prevVisStart, newStartDate);\n    };\n\n    _this.shiftDaysBackward = function (visibleStartDate) {\n      var prevVisStart = visibleStartDate.clone();\n      var newStartDate = prevVisStart.clone().subtract(Math.floor(_this.state.numDays * 2 / 3), \"days\");\n\n      _this.updateDays(prevVisStart, newStartDate);\n    };\n\n    _this.updateDays = function (prevVisStart, newStartDate) {\n      if (_this.shifting) {\n        return;\n      }\n\n      var _this$props2 = _this.props,\n          minDate = _this$props2.minDate,\n          maxDate = _this$props2.maxDate;\n      var data = [];\n      var _newStartDate = newStartDate;\n\n      if (minDate && newStartDate.isBefore(minDate, \"day\")) {\n        _newStartDate = moment(minDate);\n      }\n\n      for (var i = 0; i < _this.state.numDays; i++) {\n        var date = _newStartDate.clone().add(i, \"days\");\n\n        if (maxDate && date.isAfter(maxDate, \"day\")) {\n          break;\n        }\n\n        data.push({\n          date: date\n        });\n      }\n\n      if (data.length < _this.props.maxSimultaneousDays) {\n        return;\n      }\n\n      var _loop = function _loop(_i) {\n        if (data[_i].date.isSame(prevVisStart, \"day\")) {\n          _this.shifting = true;\n\n          _this.rlv.scrollToIndex(_i, false);\n\n          _this.timeoutResetPositionId = setTimeout(function () {\n            _this.timeoutResetPositionId = null;\n\n            _this.rlv.scrollToIndex(_i, false);\n\n            _this.shifting = false;\n          }, 800);\n          return \"break\";\n        }\n      };\n\n      for (var _i = 0; _i < data.length; _i++) {\n        var _ret = _loop(_i);\n\n        if (_ret === \"break\") break;\n      }\n\n      _this.setState({\n        data: data,\n        dataProvider: _this.dataProvider.cloneWithRows(data)\n      });\n    };\n\n    _this.onVisibleIndicesChanged = function (all, now, notNow) {\n      var _this$state = _this.state,\n          data = _this$state.data,\n          numDays = _this$state.numDays,\n          numVisibleItems = _this$state.numVisibleItems,\n          _visStartDate = _this$state.visibleStartDate,\n          _visEndDate = _this$state.visibleEndDate;\n      var visibleStartIndex = all[0];\n      var visibleStartDate = data[visibleStartIndex] ? data[visibleStartIndex].date : moment();\n      var visibleEndIndex = Math.min(visibleStartIndex + numVisibleItems - 1, data.length - 1);\n      var visibleEndDate = data[visibleEndIndex] ? data[visibleEndIndex].date : moment();\n      var _this$props3 = _this.props,\n          updateMonthYear = _this$props3.updateMonthYear,\n          onWeekChanged = _this$props3.onWeekChanged;\n\n      if (!_visStartDate || !_visEndDate || !visibleStartDate.isSame(_visStartDate, \"week\") || !visibleEndDate.isSame(_visEndDate, \"week\") || !visibleStartDate.isSame(_visStartDate, \"month\") || !visibleEndDate.isSame(_visEndDate, \"month\")) {\n        var visStart = visibleStartDate && visibleStartDate.clone();\n        var visEnd = visibleEndDate && visibleEndDate.clone();\n        onWeekChanged && onWeekChanged(visStart, visEnd);\n      }\n\n      updateMonthYear && updateMonthYear(visibleStartDate, visibleEndDate);\n\n      if (visibleStartIndex === 0) {\n        _this.shiftDaysBackward(visibleStartDate);\n      } else {\n        var minEndOffset = numDays - numVisibleItems;\n\n        if (minEndOffset > numVisibleItems) {\n          for (var _iterator = _createForOfIteratorHelperLoose(all), _step; !(_step = _iterator()).done;) {\n            var a = _step.value;\n\n            if (a > minEndOffset) {\n              _this.shiftDaysForward(visibleStartDate);\n\n              break;\n            }\n          }\n        }\n      }\n\n      _this.setState({\n        visibleStartDate: visibleStartDate,\n        visibleEndDate: visibleEndDate,\n        visibleStartIndex: visibleStartIndex\n      });\n    };\n\n    _this.onScrollStart = function (event) {\n      var onWeekScrollStart = _this.props.onWeekScrollStart;\n      var _this$state2 = _this.state,\n          prevStartDate = _this$state2.prevStartDate,\n          prevEndDate = _this$state2.prevEndDate;\n\n      if (onWeekScrollStart && prevStartDate && prevEndDate) {\n        onWeekScrollStart(prevStartDate.clone(), prevEndDate.clone());\n      }\n    };\n\n    _this.onScrollEnd = function () {\n      var onWeekScrollEnd = _this.props.onWeekScrollEnd;\n      var _this$state3 = _this.state,\n          visibleStartDate = _this$state3.visibleStartDate,\n          visibleEndDate = _this$state3.visibleEndDate,\n          prevEndDate = _this$state3.prevEndDate;\n\n      if (onWeekScrollEnd && visibleStartDate && visibleEndDate) {\n        if (!visibleEndDate.isSame(prevEndDate, \"day\")) {\n          onWeekScrollEnd(visibleStartDate.clone(), visibleEndDate.clone());\n        }\n      }\n    };\n\n    _this.onScrollBeginDrag = function () {\n      var _this$props4 = _this.props,\n          onWeekScrollStart = _this$props4.onWeekScrollStart,\n          onWeekScrollEnd = _this$props4.onWeekScrollEnd;\n\n      if (!onWeekScrollStart && !onWeekScrollEnd) {\n        return;\n      }\n\n      var _this$state4 = _this.state,\n          data = _this$state4.data,\n          visibleStartDate = _this$state4.visibleStartDate,\n          visibleEndDate = _this$state4.visibleEndDate,\n          visibleStartIndex = _this$state4.visibleStartIndex,\n          visibleEndIndex = _this$state4.visibleEndIndex;\n      var prevStartDate = visibleStartDate ? visibleStartDate : data[visibleStartIndex] ? data[visibleStartIndex].date : moment();\n      var prevEndDate = visibleEndDate ? visibleEndDate : data[visibleEndIndex] ? data[visibleEndIndex].date : moment();\n\n      _this.setState({\n        prevStartDate: prevStartDate,\n        prevEndDate: prevEndDate\n      });\n    };\n\n    _this.onLayout = function (event) {\n      var width = event.nativeEvent.layout.width;\n\n      _this.setState({\n        numVisibleItems: Math.round(width / _this.state.itemWidth)\n      });\n    };\n\n    _this.rowRenderer = function (type, data, i, extState) {\n      return _this.props.renderDay && _this.props.renderDay(_objectSpread(_objectSpread({}, data), extState));\n    };\n\n    _this.timeoutResetPositionId = null;\n\n    _this.updateLayout = function (renderDayParams) {\n      var itemHeight = renderDayParams.height;\n      var itemWidth = renderDayParams.width + renderDayParams.marginHorizontal * 2;\n      var layoutProvider = new LayoutProvider(function (index) {\n        return 0;\n      }, function (type, dim) {\n        dim.width = itemWidth;\n        dim.height = itemHeight;\n      });\n      return {\n        layoutProvider: layoutProvider,\n        itemHeight: itemHeight,\n        itemWidth: itemWidth\n      };\n    };\n\n    _this.dataProvider = new DataProvider(function (r1, r2) {\n      return r1 !== r2;\n    });\n\n    _this.updateDaysData = function (data) {\n      return {\n        data: data,\n        numDays: data.length,\n        dataProvider: _this.dataProvider.cloneWithRows(data)\n      };\n    };\n\n    _this.state = _objectSpread(_objectSpread(_objectSpread({}, _this.updateLayout(props.renderDayParams)), _this.updateDaysData(props.data)), {}, {\n      numVisibleItems: 1\n    });\n    return _this;\n  }\n\n  _createClass(CalendarScroller, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.timeoutResetPositionId !== null) {\n        clearTimeout(this.timeoutResetPositionId);\n        this.timeoutResetPositionId = null;\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var newState = {};\n      var updateState = false;\n      var _this$props$renderDay = this.props.renderDayParams,\n          width = _this$props$renderDay.width,\n          height = _this$props$renderDay.height,\n          selectedDate = _this$props$renderDay.selectedDate;\n\n      if (width !== prevProps.renderDayParams.width || height !== prevProps.renderDayParams.height) {\n        updateState = true;\n        newState = this.updateLayout(this.props.renderDayParams);\n      }\n\n      if (selectedDate !== prevProps.renderDayParams.selectedDate) {\n        this.scrollToDate(selectedDate);\n      }\n\n      if (this.props.data !== prevProps.data) {\n        updateState = true;\n        newState = _objectSpread(_objectSpread({}, newState), this.updateDaysData(this.props.data));\n      }\n\n      if (updateState) {\n        this.setState(newState);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (!this.state.data || this.state.numDays === 0 || !this.state.itemHeight) {\n        return null;\n      }\n\n      var pagingProps = this.props.pagingEnabled ? {\n        decelerationRate: 0,\n        snapToInterval: this.state.itemWidth * this.state.numVisibleItems\n      } : {};\n      return React.createElement(View, {\n        style: {\n          height: this.state.itemHeight,\n          flex: 1\n        },\n        onLayout: this.onLayout,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 7\n        }\n      }, React.createElement(RecyclerListView, {\n        ref: function ref(rlv) {\n          return _this2.rlv = rlv;\n        },\n        layoutProvider: this.state.layoutProvider,\n        dataProvider: this.state.dataProvider,\n        rowRenderer: this.rowRenderer,\n        extendedState: this.props.renderDayParams,\n        initialRenderIndex: this.props.initialRenderIndex,\n        onVisibleIndicesChanged: this.onVisibleIndicesChanged,\n        isHorizontal: true,\n        externalScrollView: this.props.externalScrollView,\n        scrollViewProps: _objectSpread({\n          showsHorizontalScrollIndicator: false,\n          contentContainerStyle: {\n            paddingRight: this.state.itemWidth / 2\n          },\n          onMomentumScrollBegin: this.onScrollStart,\n          onMomentumScrollEnd: this.onScrollEnd,\n          onScrollBeginDrag: this.onScrollBeginDrag\n        }, pagingProps),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return CalendarScroller;\n}(Component);\n\nCalendarScroller.propTypes = {\n  data: PropTypes.array.isRequired,\n  initialRenderIndex: PropTypes.number,\n  renderDay: PropTypes.func,\n  renderDayParams: PropTypes.object.isRequired,\n  minDate: PropTypes.any,\n  maxDate: PropTypes.any,\n  maxSimultaneousDays: PropTypes.number,\n  updateMonthYear: PropTypes.func,\n  onWeekChanged: PropTypes.func,\n  onWeekScrollStart: PropTypes.func,\n  onWeekScrollEnd: PropTypes.func,\n  externalScrollView: PropTypes.func,\n  pagingEnabled: PropTypes.bool\n};\nCalendarScroller.defaultProps = {\n  data: [],\n  renderDayParams: {}\n};\nexport { CalendarScroller as default };","map":{"version":3,"sources":["/Users/naomiperez/Documents/GitHub/80/client/80hd/node_modules/react-native-calendar-strip/src/Scroller.js"],"names":["React","Component","PropTypes","RecyclerListView","DataProvider","LayoutProvider","moment","CalendarScroller","props","scrollLeft","state","visibleStartIndex","newIndex","Math","max","numVisibleItems","rlv","scrollToIndex","scrollRight","numDays","scrollToEnd","scrollToDate","date","targetDate","subtract","round","minDate","maxDate","isBefore","isAfter","i","data","length","isSame","shiftDaysForward","visibleStartDate","prevVisStart","clone","newStartDate","floor","updateDays","shiftDaysBackward","shifting","_newStartDate","add","push","maxSimultaneousDays","timeoutResetPositionId","setTimeout","setState","dataProvider","cloneWithRows","onVisibleIndicesChanged","all","now","notNow","_visStartDate","_visEndDate","visibleEndDate","visibleEndIndex","min","updateMonthYear","onWeekChanged","visStart","visEnd","minEndOffset","a","onScrollStart","event","onWeekScrollStart","prevStartDate","prevEndDate","onScrollEnd","onWeekScrollEnd","onScrollBeginDrag","onLayout","width","nativeEvent","layout","itemWidth","rowRenderer","type","extState","renderDay","updateLayout","renderDayParams","itemHeight","height","marginHorizontal","layoutProvider","index","dim","r1","r2","updateDaysData","clearTimeout","prevProps","prevState","newState","updateState","selectedDate","pagingProps","pagingEnabled","decelerationRate","snapToInterval","flex","initialRenderIndex","externalScrollView","showsHorizontalScrollIndicator","contentContainerStyle","paddingRight","onMomentumScrollBegin","onMomentumScrollEnd","propTypes","array","isRequired","number","func","object","any","bool","defaultProps"],"mappings":"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","sourcesContent":["// This is a bi-directional infinite scroller.\r\n// As the beginning & end are reached, the dates are recalculated and the current\r\n// index adjusted to match the previous visible date.\r\n// RecyclerListView helps to efficiently recycle instances, but the data that\r\n// it's fed is finite. Hence the data must be shifted at the ends to appear as\r\n// an infinite scroller.\r\n\r\nimport React, { Component } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport PropTypes from \"prop-types\";\r\nimport { RecyclerListView, DataProvider, LayoutProvider } from \"recyclerlistview\";\r\nimport moment from \"moment\";\r\n\r\nexport default class CalendarScroller extends Component {\r\n  static propTypes = {\r\n    data: PropTypes.array.isRequired,\r\n    initialRenderIndex: PropTypes.number,\r\n    renderDay: PropTypes.func,\r\n    renderDayParams: PropTypes.object.isRequired,\r\n    minDate: PropTypes.any,\r\n    maxDate: PropTypes.any,\r\n    maxSimultaneousDays: PropTypes.number,\r\n    updateMonthYear: PropTypes.func,\r\n    onWeekChanged: PropTypes.func,\r\n    onWeekScrollStart: PropTypes.func,\r\n    onWeekScrollEnd: PropTypes.func,\r\n    externalScrollView: PropTypes.func,\r\n    pagingEnabled: PropTypes.bool\r\n  }\r\n\r\n  static defaultProps = {\r\n    data: [],\r\n    renderDayParams: {},\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.timeoutResetPositionId = null;\r\n\r\n    this.updateLayout = renderDayParams => {\r\n      const itemHeight = renderDayParams.height;\r\n      const itemWidth = renderDayParams.width + renderDayParams.marginHorizontal * 2;\r\n\r\n      const layoutProvider = new LayoutProvider(\r\n        index => 0, // only 1 view type\r\n        (type, dim) => {\r\n          dim.width = itemWidth;\r\n          dim.height = itemHeight;\r\n        }\r\n      );\r\n\r\n      return { layoutProvider, itemHeight, itemWidth };\r\n    }\r\n\r\n    this.dataProvider = new DataProvider((r1, r2) => {\r\n      return r1 !== r2;\r\n    });\r\n\r\n    this.updateDaysData = data => {\r\n      return {\r\n        data,\r\n        numDays: data.length,\r\n        dataProvider: this.dataProvider.cloneWithRows(data),\r\n      }\r\n    }\r\n\r\n    this.state = {\r\n      ...this.updateLayout(props.renderDayParams),\r\n      ...this.updateDaysData(props.data),\r\n      numVisibleItems: 1, // updated in onLayout\r\n    };\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.timeoutResetPositionId !== null) {\r\n      clearTimeout(this.timeoutResetPositionId);\r\n      this.timeoutResetPositionId = null;\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    let newState = {};\r\n    let updateState = false;\r\n\r\n    const {\r\n      width,\r\n      height,\r\n      selectedDate\r\n    } = this.props.renderDayParams;\r\n    if (width !== prevProps.renderDayParams.width || height !== prevProps.renderDayParams.height) {\r\n      updateState = true;\r\n      newState = this.updateLayout(this.props.renderDayParams);\r\n    }\r\n\r\n    if (selectedDate !== prevProps.renderDayParams.selectedDate) {\r\n      this.scrollToDate(selectedDate);\r\n    }\r\n\r\n    if (this.props.data !== prevProps.data) {\r\n      updateState = true;\r\n      newState = {...newState, ...this.updateDaysData(this.props.data)};\r\n    }\r\n\r\n    if (updateState) {\r\n      this.setState(newState);\r\n    }\r\n  }\r\n\r\n  // Scroll left, guarding against start index.\r\n  scrollLeft = () => {\r\n    if (this.state.visibleStartIndex === 0) {\r\n      return;\r\n    }\r\n    const newIndex = Math.max(this.state.visibleStartIndex - this.state.numVisibleItems, 0);\r\n    this.rlv.scrollToIndex(newIndex, true);\r\n  }\r\n\r\n  // Scroll right, guarding against end index.\r\n  scrollRight = () => {\r\n    const newIndex = this.state.visibleStartIndex + this.state.numVisibleItems;\r\n    if (newIndex >= (this.state.numDays - 1)) {\r\n      this.rlv.scrollToEnd(true); // scroll to the very end, including padding\r\n      return;\r\n    }\r\n    this.rlv.scrollToIndex(newIndex, true);\r\n  }\r\n\r\n  // Scroll to given date, and check against min and max date if available.\r\n  scrollToDate = (date) => {\r\n    let targetDate = moment(date).subtract(Math.round(this.state.numVisibleItems / 2) - 1, \"days\");\r\n    const {\r\n      minDate,\r\n      maxDate,\r\n    } = this.props;\r\n\r\n    // Falls back to min or max date when the given date exceeds the available dates\r\n    if (minDate && targetDate.isBefore(minDate, \"day\")) {\r\n      targetDate = minDate;\r\n    } else if (maxDate && targetDate.isAfter(maxDate, \"day\")) {\r\n      targetDate = maxDate;\r\n    }\r\n\r\n    for (let i = 0; i < this.state.data.length; i++) {\r\n      if (this.state.data[i].date.isSame(targetDate, \"day\")) {\r\n        this.rlv.scrollToIndex(i, true);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Shift dates when end of list is reached.\r\n  shiftDaysForward = (visibleStartDate = this.state.visibleStartDate) => {\r\n    const prevVisStart = visibleStartDate.clone();\r\n    const newStartDate = prevVisStart.clone().subtract(Math.floor(this.state.numDays / 3), \"days\");\r\n    this.updateDays(prevVisStart, newStartDate);\r\n  }\r\n\r\n  // Shift dates when beginning of list is reached.\r\n  shiftDaysBackward = (visibleStartDate) => {\r\n    const prevVisStart = visibleStartDate.clone();\r\n    const newStartDate = prevVisStart.clone().subtract(Math.floor(this.state.numDays * 2/3), \"days\");\r\n    this.updateDays(prevVisStart, newStartDate);\r\n  }\r\n\r\n  updateDays = (prevVisStart, newStartDate) => {\r\n    if (this.shifting) {\r\n      return;\r\n    }\r\n    const {\r\n      minDate,\r\n      maxDate,\r\n    } = this.props;\r\n    const data = [];\r\n    let _newStartDate = newStartDate;\r\n    if (minDate && newStartDate.isBefore(minDate, \"day\")) {\r\n      _newStartDate = moment(minDate);\r\n    }\r\n    for (let i = 0; i < this.state.numDays; i++) {\r\n      let date = _newStartDate.clone().add(i, \"days\");\r\n      if (maxDate && date.isAfter(maxDate, \"day\")) {\r\n        break;\r\n      }\r\n      data.push({date});\r\n    }\r\n    // Prevent reducing range when the minDate - maxDate range is small.\r\n    if (data.length < this.props.maxSimultaneousDays) {\r\n      return;\r\n    }\r\n\r\n    // Scroll to previous date\r\n    for (let i = 0; i < data.length; i++) {\r\n      if (data[i].date.isSame(prevVisStart, \"day\")) {\r\n        this.shifting = true;\r\n        this.rlv.scrollToIndex(i, false);\r\n        // RecyclerListView sometimes returns position to old index after\r\n        // moving to the new one. Set position again after delay.\r\n        this.timeoutResetPositionId = setTimeout(() => {\r\n          this.timeoutResetPositionId = null;\r\n          this.rlv.scrollToIndex(i, false);\r\n          this.shifting = false; // debounce\r\n        }, 800);\r\n        break;\r\n      }\r\n    }\r\n    this.setState({\r\n      data,\r\n      dataProvider: this.dataProvider.cloneWithRows(data),\r\n    });\r\n  }\r\n\r\n  // Track which dates are visible.\r\n  onVisibleIndicesChanged = (all, now, notNow) => {\r\n    const {\r\n      data,\r\n      numDays,\r\n      numVisibleItems,\r\n      visibleStartDate: _visStartDate,\r\n      visibleEndDate: _visEndDate,\r\n    } = this.state;\r\n    const visibleStartIndex = all[0];\r\n    const visibleStartDate = data[visibleStartIndex] ? data[visibleStartIndex].date : moment();\r\n    const visibleEndIndex = Math.min(visibleStartIndex + numVisibleItems - 1, data.length - 1);\r\n    const visibleEndDate = data[visibleEndIndex] ? data[visibleEndIndex].date : moment();\r\n\r\n    const {\r\n      updateMonthYear,\r\n      onWeekChanged,\r\n    } = this.props;\r\n\r\n    // Fire month/year update on both week and month changes.  This is\r\n    // necessary for the header and onWeekChanged updates.\r\n    if (!_visStartDate || !_visEndDate ||\r\n        !visibleStartDate.isSame(_visStartDate, \"week\") ||\r\n        !visibleEndDate.isSame(_visEndDate, \"week\") ||\r\n        !visibleStartDate.isSame(_visStartDate, \"month\") ||\r\n        !visibleEndDate.isSame(_visEndDate, \"month\") )\r\n    {\r\n      const visStart = visibleStartDate && visibleStartDate.clone();\r\n      const visEnd = visibleEndDate && visibleEndDate.clone();\r\n      onWeekChanged && onWeekChanged(visStart, visEnd);\r\n    }\r\n\r\n    // Always update weekstart/end for WeekSelectors.\r\n    updateMonthYear && updateMonthYear(visibleStartDate, visibleEndDate);\r\n\r\n    if (visibleStartIndex === 0) {\r\n      this.shiftDaysBackward(visibleStartDate);\r\n    } else {\r\n      const minEndOffset = numDays - numVisibleItems;\r\n      if (minEndOffset > numVisibleItems) {\r\n        for (let a of all) {\r\n          if (a > minEndOffset) {\r\n            this.shiftDaysForward(visibleStartDate);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.setState({\r\n      visibleStartDate,\r\n      visibleEndDate,\r\n      visibleStartIndex,\r\n    });\r\n  }\r\n\r\n  onScrollStart = (event) => {\r\n    const {onWeekScrollStart} = this.props;\r\n    const {prevStartDate, prevEndDate} = this.state;\r\n\r\n    if (onWeekScrollStart && prevStartDate && prevEndDate) {\r\n      onWeekScrollStart(prevStartDate.clone(), prevEndDate.clone());\r\n    }\r\n  }\r\n\r\n  onScrollEnd = () => {\r\n    const {onWeekScrollEnd} = this.props;\r\n    const {visibleStartDate, visibleEndDate, prevEndDate} = this.state;\r\n\r\n    if (onWeekScrollEnd && visibleStartDate && visibleEndDate) {\r\n      if (!visibleEndDate.isSame(prevEndDate, \"day\")) {\r\n        onWeekScrollEnd(visibleStartDate.clone(), visibleEndDate.clone());\r\n      }\r\n    }\r\n  }\r\n\r\n  onScrollBeginDrag = () => {\r\n    const {\r\n      onWeekScrollStart,\r\n      onWeekScrollEnd,\r\n    } = this.props;\r\n    // Prev dates required only if scroll callbacks are defined\r\n    if (!onWeekScrollStart && !onWeekScrollEnd) {\r\n      return;\r\n    }\r\n    const {\r\n      data,\r\n      visibleStartDate,\r\n      visibleEndDate,\r\n      visibleStartIndex,\r\n      visibleEndIndex,\r\n    } = this.state;\r\n    const prevStartDate = visibleStartDate ? visibleStartDate\r\n      : (data[visibleStartIndex] ? data[visibleStartIndex].date : moment());\r\n    const prevEndDate = visibleEndDate ? visibleEndDate\r\n      : (data[visibleEndIndex] ? data[visibleEndIndex].date : moment());\r\n\r\n    this.setState({\r\n      prevStartDate,\r\n      prevEndDate,\r\n    });\r\n  }\r\n\r\n  onLayout = event => {\r\n    let width = event.nativeEvent.layout.width;\r\n    this.setState({\r\n      numVisibleItems: Math.round(width / this.state.itemWidth),\r\n    });\r\n  }\r\n\r\n  rowRenderer = (type, data, i, extState) => {\r\n    return this.props.renderDay && this.props.renderDay({...data, ...extState});\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.data || this.state.numDays === 0 || !this.state.itemHeight) {\r\n      return null;\r\n    }\r\n\r\n    const pagingProps = this.props.pagingEnabled ? {\r\n      decelerationRate: 0,\r\n      snapToInterval: this.state.itemWidth * this.state.numVisibleItems\r\n    } : {};\r\n\r\n    return (\r\n      <View\r\n        style={{ height: this.state.itemHeight, flex: 1 }}\r\n        onLayout={this.onLayout}\r\n      >\r\n        <RecyclerListView\r\n          ref={rlv => this.rlv = rlv}\r\n          layoutProvider={this.state.layoutProvider}\r\n          dataProvider={this.state.dataProvider}\r\n          rowRenderer={this.rowRenderer}\r\n          extendedState={this.props.renderDayParams}\r\n          initialRenderIndex={this.props.initialRenderIndex}\r\n          onVisibleIndicesChanged={this.onVisibleIndicesChanged}\r\n          isHorizontal\r\n          externalScrollView={this.props.externalScrollView}\r\n          scrollViewProps={{\r\n            showsHorizontalScrollIndicator: false,\r\n            contentContainerStyle: { paddingRight: this.state.itemWidth / 2 },\r\n            onMomentumScrollBegin: this.onScrollStart,\r\n            onMomentumScrollEnd: this.onScrollEnd,\r\n            onScrollBeginDrag: this.onScrollBeginDrag,\r\n            ...pagingProps\r\n          }}\r\n        />\r\n      </View>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}