{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { isArray, isNumber } from '@react-native-firebase/app/lib/common';\nimport { buildNativeArray, provideFieldValueClass } from \"./utils/serialize\";\nexport var TypeFieldValueDelete = 'delete';\nexport var TypeFieldValueIncrement = 'increment';\nexport var TypeFieldValueRemove = 'array_remove';\nexport var TypeFieldValueUnion = 'array_union';\nexport var TypeFieldValueTimestamp = 'timestamp';\n\nfunction validateArrayElements(elements) {\n  for (var i = 0; i < elements.length; i++) {\n    var element = elements[i];\n\n    if (element instanceof FirestoreFieldValue) {\n      throw new Error('FieldValue instance cannot be used with other FieldValue methods.');\n    }\n\n    if (isArray(element)) {\n      throw new Error('Nested arrays are not supported');\n    }\n  }\n}\n\nvar FirestoreFieldValue = function () {\n  function FirestoreFieldValue() {\n    var internal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var type = arguments.length > 1 ? arguments[1] : undefined;\n    var elements = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, FirestoreFieldValue);\n\n    if (internal === false) {\n      throw new Error('firebase.firestore.FieldValue constructor is private, use FieldValue.<field>() instead.');\n    }\n\n    this._type = type;\n    this._elements = elements;\n  }\n\n  _createClass(FirestoreFieldValue, [{\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      if (!(other instanceof FirestoreFieldValue)) {\n        throw new Error(\"firebase.firestore.FieldValue.isEqual(*) 'other' expected a FieldValue instance.\");\n      }\n\n      return this._type === other._type && JSON.stringify(this._elements) === JSON.stringify(other._elements);\n    }\n  }], [{\n    key: \"delete\",\n    value: function _delete() {\n      return new FirestoreFieldValue(true, TypeFieldValueDelete);\n    }\n  }, {\n    key: \"increment\",\n    value: function increment(n) {\n      if (!isNumber(n)) {\n        throw new Error(\"firebase.firestore.FieldValue.increment(*) 'n' expected a number value.\");\n      }\n\n      return new FirestoreFieldValue(true, TypeFieldValueIncrement, n);\n    }\n  }, {\n    key: \"serverTimestamp\",\n    value: function serverTimestamp() {\n      return new FirestoreFieldValue(true, TypeFieldValueTimestamp);\n    }\n  }, {\n    key: \"arrayUnion\",\n    value: function arrayUnion() {\n      for (var _len = arguments.length, elements = new Array(_len), _key = 0; _key < _len; _key++) {\n        elements[_key] = arguments[_key];\n      }\n\n      try {\n        validateArrayElements(elements);\n      } catch (e) {\n        throw new Error(\"firebase.firestore.FieldValue.arrayUnion(*) 'elements' called with invalid data. \" + e.message);\n      }\n\n      return new FirestoreFieldValue(true, TypeFieldValueUnion, buildNativeArray(elements));\n    }\n  }, {\n    key: \"arrayRemove\",\n    value: function arrayRemove() {\n      for (var _len2 = arguments.length, elements = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        elements[_key2] = arguments[_key2];\n      }\n\n      try {\n        validateArrayElements(elements);\n      } catch (e) {\n        throw new Error(\"firebase.firestore.FieldValue.arrayRemove(*) 'elements' called with invalid data. \" + e.message);\n      }\n\n      return new FirestoreFieldValue(true, TypeFieldValueRemove, buildNativeArray(elements));\n    }\n  }]);\n\n  return FirestoreFieldValue;\n}();\n\nexport { FirestoreFieldValue as default };\nprovideFieldValueClass(FirestoreFieldValue);","map":{"version":3,"sources":["/Users/naomiperez/Documents/GitHub/80/client/80hd/node_modules/@react-native-firebase/firestore/lib/FirestoreFieldValue.js"],"names":["isArray","isNumber","buildNativeArray","provideFieldValueClass","TypeFieldValueDelete","TypeFieldValueIncrement","TypeFieldValueRemove","TypeFieldValueUnion","TypeFieldValueTimestamp","validateArrayElements","elements","i","length","element","FirestoreFieldValue","Error","internal","type","_type","_elements","other","JSON","stringify","n","e","message"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isArray, isNumber } from '@react-native-firebase/app/lib/common';\nimport { buildNativeArray, provideFieldValueClass } from './utils/serialize';\n\nexport const TypeFieldValueDelete = 'delete';\nexport const TypeFieldValueIncrement = 'increment';\nexport const TypeFieldValueRemove = 'array_remove';\nexport const TypeFieldValueUnion = 'array_union';\nexport const TypeFieldValueTimestamp = 'timestamp';\n\nfunction validateArrayElements(elements) {\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n\n    if (element instanceof FirestoreFieldValue) {\n      throw new Error('FieldValue instance cannot be used with other FieldValue methods.');\n    }\n\n    if (isArray(element)) {\n      throw new Error('Nested arrays are not supported');\n    }\n  }\n}\n\nexport default class FirestoreFieldValue {\n  constructor(internal = false, type, elements) {\n    if (internal === false) {\n      throw new Error(\n        'firebase.firestore.FieldValue constructor is private, use FieldValue.<field>() instead.',\n      );\n    }\n\n    this._type = type;\n    this._elements = elements;\n  }\n\n  static delete() {\n    return new FirestoreFieldValue(true, TypeFieldValueDelete);\n  }\n\n  static increment(n) {\n    if (!isNumber(n)) {\n      throw new Error(\"firebase.firestore.FieldValue.increment(*) 'n' expected a number value.\");\n    }\n\n    return new FirestoreFieldValue(true, TypeFieldValueIncrement, n);\n  }\n\n  static serverTimestamp() {\n    return new FirestoreFieldValue(true, TypeFieldValueTimestamp);\n  }\n\n  static arrayUnion(...elements) {\n    try {\n      validateArrayElements(elements);\n    } catch (e) {\n      throw new Error(\n        `firebase.firestore.FieldValue.arrayUnion(*) 'elements' called with invalid data. ${e.message}`,\n      );\n    }\n\n    return new FirestoreFieldValue(true, TypeFieldValueUnion, buildNativeArray(elements));\n  }\n\n  static arrayRemove(...elements) {\n    try {\n      validateArrayElements(elements);\n    } catch (e) {\n      throw new Error(\n        `firebase.firestore.FieldValue.arrayRemove(*) 'elements' called with invalid data. ${e.message}`,\n      );\n    }\n\n    return new FirestoreFieldValue(true, TypeFieldValueRemove, buildNativeArray(elements));\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreFieldValue)) {\n      throw new Error(\n        \"firebase.firestore.FieldValue.isEqual(*) 'other' expected a FieldValue instance.\",\n      );\n    }\n\n    return (\n      this._type === other._type &&\n      JSON.stringify(this._elements) === JSON.stringify(other._elements)\n    );\n  }\n}\n\nprovideFieldValueClass(FirestoreFieldValue); // serialize\n"]},"metadata":{},"sourceType":"module"}