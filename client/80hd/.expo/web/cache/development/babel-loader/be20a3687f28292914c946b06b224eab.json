{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { isAndroid, isFunction, isIOS, promiseDefer } from '@react-native-firebase/app/lib/common';\nimport NativeFirebaseError from '@react-native-firebase/app/lib/internal/NativeFirebaseError';\nvar REQUEST_ID = 0;\n\nvar PhoneAuthListener = function () {\n  function PhoneAuthListener(auth, phoneNumber, timeout, forceResend) {\n    _classCallCheck(this, PhoneAuthListener);\n\n    this._auth = auth;\n    this._reject = null;\n    this._resolve = null;\n    this._promise = null;\n    this._jsStack = new Error().stack;\n    this._timeout = timeout || 20;\n    this._phoneAuthRequestId = REQUEST_ID++;\n    this._forceResending = forceResend || false;\n    this._internalEvents = {\n      codeSent: \"phone:auth:\" + this._phoneAuthRequestId + \":onCodeSent\",\n      verificationFailed: \"phone:auth:\" + this._phoneAuthRequestId + \":onVerificationFailed\",\n      verificationComplete: \"phone:auth:\" + this._phoneAuthRequestId + \":onVerificationComplete\",\n      codeAutoRetrievalTimeout: \"phone:auth:\" + this._phoneAuthRequestId + \":onCodeAutoRetrievalTimeout\"\n    };\n    this._publicEvents = {\n      error: \"phone:auth:\" + this._phoneAuthRequestId + \":error\",\n      event: \"phone:auth:\" + this._phoneAuthRequestId + \":event\",\n      success: \"phone:auth:\" + this._phoneAuthRequestId + \":success\"\n    };\n\n    this._subscribeToEvents();\n\n    if (isAndroid) {\n      this._auth.native.verifyPhoneNumber(phoneNumber, this._phoneAuthRequestId + '', this._timeout, this._forceResending);\n    }\n\n    if (isIOS) {\n      this._auth.native.verifyPhoneNumber(phoneNumber, this._phoneAuthRequestId + '');\n    }\n  }\n\n  _createClass(PhoneAuthListener, [{\n    key: \"_subscribeToEvents\",\n    value: function _subscribeToEvents() {\n      var _this = this;\n\n      var events = Object.keys(this._internalEvents);\n\n      var _loop = function _loop(i, len) {\n        var type = events[i];\n\n        var subscription = _this._auth.emitter.addListener(_this._internalEvents[type], function (event) {\n          _this[\"_\" + type + \"Handler\"](event);\n\n          subscription.remove();\n        });\n      };\n\n      for (var i = 0, len = events.length; i < len; i++) {\n        _loop(i, len);\n      }\n    }\n  }, {\n    key: \"_addUserObserver\",\n    value: function _addUserObserver(observer) {\n      this._auth.emitter.addListener(this._publicEvents.event, observer);\n    }\n  }, {\n    key: \"_emitToObservers\",\n    value: function _emitToObservers(snapshot) {\n      this._auth.emitter.emit(this._publicEvents.event, snapshot);\n    }\n  }, {\n    key: \"_emitToErrorCb\",\n    value: function _emitToErrorCb(snapshot) {\n      var error = snapshot.error;\n\n      if (this._reject) {\n        this._reject(error);\n      }\n\n      this._auth.emitter.emit(this._publicEvents.error, error);\n    }\n  }, {\n    key: \"_emitToSuccessCb\",\n    value: function _emitToSuccessCb(snapshot) {\n      if (this._resolve) {\n        this._resolve(snapshot);\n      }\n\n      this._auth.emitter.emit(this._publicEvents.success, snapshot);\n    }\n  }, {\n    key: \"_removeAllListeners\",\n    value: function _removeAllListeners() {\n      var _this2 = this;\n\n      setTimeout(function () {\n        Object.values(_this2._internalEvents).forEach(function (event) {\n          _this2._auth.emitter.removeAllListeners(event);\n        });\n        Object.values(_this2._publicEvents).forEach(function (publicEvent) {\n          _this2._auth.emitter.removeAllListeners(publicEvent);\n        });\n      }, 0);\n    }\n  }, {\n    key: \"_promiseDeferred\",\n    value: function _promiseDeferred() {\n      if (!this._promise) {\n        var _promiseDefer = promiseDefer(),\n            promise = _promiseDefer.promise,\n            resolve = _promiseDefer.resolve,\n            reject = _promiseDefer.reject;\n\n        this._promise = promise;\n        this._resolve = resolve;\n        this._reject = reject;\n      }\n    }\n  }, {\n    key: \"_codeSentHandler\",\n    value: function _codeSentHandler(credential) {\n      var snapshot = {\n        verificationId: credential.verificationId,\n        code: null,\n        error: null,\n        state: 'sent'\n      };\n\n      this._emitToObservers(snapshot);\n\n      if (isIOS) {\n        this._emitToSuccessCb(snapshot);\n      }\n\n      if (isAndroid) {}\n    }\n  }, {\n    key: \"_codeAutoRetrievalTimeoutHandler\",\n    value: function _codeAutoRetrievalTimeoutHandler(credential) {\n      var snapshot = {\n        verificationId: credential.verificationId,\n        code: null,\n        error: null,\n        state: 'timeout'\n      };\n\n      this._emitToObservers(snapshot);\n\n      this._emitToSuccessCb(snapshot);\n    }\n  }, {\n    key: \"_verificationCompleteHandler\",\n    value: function _verificationCompleteHandler(credential) {\n      var snapshot = {\n        verificationId: credential.verificationId,\n        code: credential.code || null,\n        error: null,\n        state: 'verified'\n      };\n\n      this._emitToObservers(snapshot);\n\n      this._emitToSuccessCb(snapshot);\n\n      this._removeAllListeners();\n    }\n  }, {\n    key: \"_verificationFailedHandler\",\n    value: function _verificationFailedHandler(state) {\n      var snapshot = {\n        verificationId: state.verificationId,\n        code: null,\n        error: null,\n        state: 'error'\n      };\n      snapshot.error = new NativeFirebaseError({\n        userInfo: state.error\n      }, this._jsStack, 'auth');\n\n      this._emitToObservers(snapshot);\n\n      this._emitToErrorCb(snapshot);\n\n      this._removeAllListeners();\n    }\n  }, {\n    key: \"on\",\n    value: function on(event, observer, errorCb, successCb) {\n      if (event !== 'state_changed') {\n        throw new Error(\"firebase.auth.PhoneAuthListener.on(*, _, _, _) 'event' must equal 'state_changed'.\");\n      }\n\n      if (!isFunction(observer)) {\n        throw new Error(\"firebase.auth.PhoneAuthListener.on(_, *, _, _) 'observer' must be a function.\");\n      }\n\n      this._addUserObserver(observer);\n\n      if (isFunction(errorCb)) {\n        var subscription = this._auth.emitter.addListener(this._publicEvents.error, function () {\n          errorCb;\n          subscription.remove();\n        });\n      }\n\n      if (isFunction(successCb)) {\n        var _subscription = this._auth.emitter.addListener(this._publicEvents.success, function () {\n          successCb;\n\n          _subscription.remove();\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"then\",\n    value: function then(fn) {\n      this._promiseDeferred();\n\n      if (this._promise) {\n        return this._promise.then.bind(this._promise)(fn);\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"catch\",\n    value: function _catch(fn) {\n      this._promiseDeferred();\n\n      if (this._promise) {\n        return this._promise.catch.bind(this._promise)(fn);\n      }\n\n      return undefined;\n    }\n  }]);\n\n  return PhoneAuthListener;\n}();\n\nexport { PhoneAuthListener as default };","map":{"version":3,"sources":["/Users/naomiperez/Documents/GitHub/80/client/80hd/node_modules/@react-native-firebase/auth/lib/PhoneAuthListener.js"],"names":["isAndroid","isFunction","isIOS","promiseDefer","NativeFirebaseError","REQUEST_ID","PhoneAuthListener","auth","phoneNumber","timeout","forceResend","_auth","_reject","_resolve","_promise","_jsStack","Error","stack","_timeout","_phoneAuthRequestId","_forceResending","_internalEvents","codeSent","verificationFailed","verificationComplete","codeAutoRetrievalTimeout","_publicEvents","error","event","success","_subscribeToEvents","native","verifyPhoneNumber","events","Object","keys","i","len","type","subscription","emitter","addListener","remove","length","observer","snapshot","emit","setTimeout","values","forEach","removeAllListeners","publicEvent","promise","resolve","reject","credential","verificationId","code","state","_emitToObservers","_emitToSuccessCb","_removeAllListeners","userInfo","_emitToErrorCb","errorCb","successCb","_addUserObserver","fn","_promiseDeferred","then","bind","undefined","catch"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isAndroid, isFunction, isIOS, promiseDefer } from '@react-native-firebase/app/lib/common';\nimport NativeFirebaseError from '@react-native-firebase/app/lib/internal/NativeFirebaseError';\n\nlet REQUEST_ID = 0;\n\nexport default class PhoneAuthListener {\n  constructor(auth, phoneNumber, timeout, forceResend) {\n    this._auth = auth;\n    this._reject = null;\n    this._resolve = null;\n    this._promise = null;\n    this._jsStack = new Error().stack;\n\n    this._timeout = timeout || 20;\n    this._phoneAuthRequestId = REQUEST_ID++;\n    this._forceResending = forceResend || false;\n\n    // internal events\n    this._internalEvents = {\n      codeSent: `phone:auth:${this._phoneAuthRequestId}:onCodeSent`,\n      verificationFailed: `phone:auth:${this._phoneAuthRequestId}:onVerificationFailed`,\n      verificationComplete: `phone:auth:${this._phoneAuthRequestId}:onVerificationComplete`,\n      codeAutoRetrievalTimeout: `phone:auth:${this._phoneAuthRequestId}:onCodeAutoRetrievalTimeout`,\n    };\n\n    // user observer events\n    this._publicEvents = {\n      error: `phone:auth:${this._phoneAuthRequestId}:error`,\n      event: `phone:auth:${this._phoneAuthRequestId}:event`,\n      success: `phone:auth:${this._phoneAuthRequestId}:success`,\n    };\n\n    this._subscribeToEvents();\n\n    if (isAndroid) {\n      this._auth.native.verifyPhoneNumber(\n        phoneNumber,\n        this._phoneAuthRequestId + '',\n        this._timeout,\n        this._forceResending,\n      );\n    }\n\n    if (isIOS) {\n      this._auth.native.verifyPhoneNumber(phoneNumber, this._phoneAuthRequestId + '');\n    }\n  }\n\n  _subscribeToEvents() {\n    const events = Object.keys(this._internalEvents);\n\n    for (let i = 0, len = events.length; i < len; i++) {\n      const type = events[i];\n      const subscription = this._auth.emitter.addListener(this._internalEvents[type], event => {\n        this[`_${type}Handler`](event);\n        subscription.remove();\n      });\n    }\n  }\n\n  _addUserObserver(observer) {\n    this._auth.emitter.addListener(this._publicEvents.event, observer);\n  }\n\n  _emitToObservers(snapshot) {\n    this._auth.emitter.emit(this._publicEvents.event, snapshot);\n  }\n\n  _emitToErrorCb(snapshot) {\n    const { error } = snapshot;\n    if (this._reject) {\n      this._reject(error);\n    }\n    this._auth.emitter.emit(this._publicEvents.error, error);\n  }\n\n  _emitToSuccessCb(snapshot) {\n    if (this._resolve) {\n      this._resolve(snapshot);\n    }\n    this._auth.emitter.emit(this._publicEvents.success, snapshot);\n  }\n\n  _removeAllListeners() {\n    setTimeout(() => {\n      // move to next event loop - not sure if needed\n      // internal listeners\n      Object.values(this._internalEvents).forEach(event => {\n        this._auth.emitter.removeAllListeners(event);\n      });\n\n      // user observer listeners\n      Object.values(this._publicEvents).forEach(publicEvent => {\n        this._auth.emitter.removeAllListeners(publicEvent);\n      });\n    }, 0);\n  }\n\n  _promiseDeferred() {\n    if (!this._promise) {\n      const { promise, resolve, reject } = promiseDefer();\n      this._promise = promise;\n      this._resolve = resolve;\n      this._reject = reject;\n    }\n  }\n\n  /* --------------------------\n   --- INTERNAL EVENT HANDLERS\n   ---------------------------- */\n\n  _codeSentHandler(credential) {\n    const snapshot = {\n      verificationId: credential.verificationId,\n      code: null,\n      error: null,\n      state: 'sent',\n    };\n\n    this._emitToObservers(snapshot);\n\n    if (isIOS) {\n      this._emitToSuccessCb(snapshot);\n    }\n\n    if (isAndroid) {\n      // android can auto retrieve so we don't emit to successCb immediately,\n      // if auto retrieve times out then that will emit to successCb\n    }\n  }\n\n  _codeAutoRetrievalTimeoutHandler(credential) {\n    const snapshot = {\n      verificationId: credential.verificationId,\n      code: null,\n      error: null,\n      state: 'timeout',\n    };\n\n    this._emitToObservers(snapshot);\n    this._emitToSuccessCb(snapshot);\n  }\n\n  _verificationCompleteHandler(credential) {\n    const snapshot = {\n      verificationId: credential.verificationId,\n      code: credential.code || null,\n      error: null,\n      state: 'verified',\n    };\n\n    this._emitToObservers(snapshot);\n    this._emitToSuccessCb(snapshot);\n    this._removeAllListeners();\n  }\n\n  _verificationFailedHandler(state) {\n    const snapshot = {\n      verificationId: state.verificationId,\n      code: null,\n      error: null,\n      state: 'error',\n    };\n\n    snapshot.error = new NativeFirebaseError({ userInfo: state.error }, this._jsStack, 'auth');\n\n    this._emitToObservers(snapshot);\n    this._emitToErrorCb(snapshot);\n    this._removeAllListeners();\n  }\n\n  /* -------------\n   -- PUBLIC API\n   --------------*/\n\n  on(event, observer, errorCb, successCb) {\n    if (event !== 'state_changed') {\n      throw new Error(\n        \"firebase.auth.PhoneAuthListener.on(*, _, _, _) 'event' must equal 'state_changed'.\",\n      );\n    }\n\n    if (!isFunction(observer)) {\n      throw new Error(\n        \"firebase.auth.PhoneAuthListener.on(_, *, _, _) 'observer' must be a function.\",\n      );\n    }\n\n    this._addUserObserver(observer);\n\n    if (isFunction(errorCb)) {\n      const subscription = this._auth.emitter.addListener(this._publicEvents.error, () => {\n        errorCb;\n        subscription.remove();\n      });\n    }\n\n    if (isFunction(successCb)) {\n      const subscription = this._auth.emitter.addListener(this._publicEvents.success, () => {\n        successCb;\n        subscription.remove();\n      });\n    }\n\n    return this;\n  }\n\n  then(fn) {\n    this._promiseDeferred();\n    if (this._promise) {\n      return this._promise.then.bind(this._promise)(fn);\n    }\n    return undefined;\n  }\n\n  catch(fn) {\n    this._promiseDeferred();\n    if (this._promise) {\n      return this._promise.catch.bind(this._promise)(fn);\n    }\n    return undefined;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}