{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/naomiperez/Documents/GitHub/80/client/80hd/node_modules/react-native-elements/dist/tooltip/Tooltip.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Fragment } from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { withTheme } from \"../config\";\nimport { ScreenWidth, ScreenHeight, isIOS } from \"../helpers\";\nimport Triangle from \"./Triangle\";\nimport getTooltipCoordinate, { getElementVisibleWidth } from \"./getTooltipCoordinate\";\nvar defaultProps = {\n  withOverlay: true,\n  overlayColor: 'rgba(250, 250, 250, 0.70)',\n  highlightColor: 'transparent',\n  withPointer: true,\n  toggleOnPress: true,\n  toggleAction: 'onPress',\n  height: 40,\n  width: 150,\n  containerStyle: {},\n  backgroundColor: '#617080',\n  onClose: function onClose() {},\n  onOpen: function onOpen() {},\n  skipAndroidStatusBar: false,\n  ModalComponent: Modal,\n  closeOnlyOnBackdropPress: false\n};\n\nvar Tooltip = function (_React$Component) {\n  _inherits(Tooltip, _React$Component);\n\n  var _super = _createSuper(Tooltip);\n\n  function Tooltip() {\n    var _this;\n\n    _classCallCheck(this, Tooltip);\n\n    _this = _super.apply(this, arguments);\n    _this._isMounted = false;\n    _this.state = {\n      isVisible: false,\n      yOffset: 0,\n      xOffset: 0,\n      elementWidth: 0,\n      elementHeight: 0\n    };\n\n    _this.toggleTooltip = function () {\n      var onClose = _this.props.onClose;\n\n      _this.getElementPosition();\n\n      _this._isMounted && _this.setState(function (prevState) {\n        if (prevState.isVisible) {\n          onClose && onClose();\n        }\n\n        return {\n          isVisible: !prevState.isVisible\n        };\n      });\n    };\n\n    _this.wrapWithPress = function (toggleOnPress, toggleAction, children) {\n      if (toggleOnPress) {\n        return React.createElement(TouchableOpacity, _extends({}, _defineProperty({}, toggleAction, _this.toggleTooltip), {\n          delayLongPress: 250,\n          activeOpacity: 1,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 25\n          }\n        }), children);\n      }\n\n      return children;\n    };\n\n    _this.containerStyle = function (withOverlay, overlayColor) {\n      return {\n        backgroundColor: withOverlay ? overlayColor : 'transparent',\n        flex: 1\n      };\n    };\n\n    _this.getTooltipStyle = function () {\n      var _ref2;\n\n      var _this$state = _this.state,\n          yOffset = _this$state.yOffset,\n          xOffset = _this$state.xOffset,\n          elementHeight = _this$state.elementHeight,\n          elementWidth = _this$state.elementWidth;\n      var _this$props = _this.props,\n          height = _this$props.height,\n          backgroundColor = _this$props.backgroundColor,\n          width = _this$props.width,\n          withPointer = _this$props.withPointer,\n          containerStyle = _this$props.containerStyle;\n\n      var _getTooltipCoordinate = getTooltipCoordinate(xOffset, yOffset, elementWidth, elementHeight, ScreenWidth, ScreenHeight, width, height, withPointer),\n          x = _getTooltipCoordinate.x,\n          y = _getTooltipCoordinate.y;\n\n      return StyleSheet.flatten([(_ref2 = {\n        position: 'absolute'\n      }, _defineProperty(_ref2, I18nManager.isRTL ? 'right' : 'left', x), _defineProperty(_ref2, \"top\", y), _defineProperty(_ref2, \"width\", width), _defineProperty(_ref2, \"height\", height), _defineProperty(_ref2, \"backgroundColor\", backgroundColor), _defineProperty(_ref2, \"display\", 'flex'), _defineProperty(_ref2, \"alignItems\", 'center'), _defineProperty(_ref2, \"justifyContent\", 'center'), _defineProperty(_ref2, \"flex\", 1), _defineProperty(_ref2, \"borderRadius\", 10), _defineProperty(_ref2, \"padding\", 10), _ref2), containerStyle]);\n    };\n\n    _this.renderPointer = function (tooltipY) {\n      var _this$state2 = _this.state,\n          yOffset = _this$state2.yOffset,\n          xOffset = _this$state2.xOffset,\n          elementHeight = _this$state2.elementHeight,\n          elementWidth = _this$state2.elementWidth;\n      var _this$props2 = _this.props,\n          backgroundColor = _this$props2.backgroundColor,\n          pointerColor = _this$props2.pointerColor;\n      var pastMiddleLine = yOffset > tooltipY;\n      return React.createElement(View, {\n        style: _defineProperty({\n          position: 'absolute',\n          top: pastMiddleLine ? yOffset - 13 : yOffset + elementHeight - 2\n        }, I18nManager.isRTL ? 'right' : 'left', xOffset + getElementVisibleWidth(elementWidth, xOffset, ScreenWidth) / 2 - 7.5),\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }\n      }, React.createElement(Triangle, {\n        style: {\n          borderBottomColor: pointerColor || backgroundColor\n        },\n        isDown: pastMiddleLine,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    _this.getTooltipHighlightedButtonStyle = function () {\n      var _ref4;\n\n      var highlightColor = _this.props.highlightColor;\n      var _this$state3 = _this.state,\n          yOffset = _this$state3.yOffset,\n          xOffset = _this$state3.xOffset,\n          elementWidth = _this$state3.elementWidth,\n          elementHeight = _this$state3.elementHeight;\n      return _ref4 = {\n        position: 'absolute',\n        top: yOffset\n      }, _defineProperty(_ref4, I18nManager.isRTL ? 'right' : 'left', xOffset), _defineProperty(_ref4, \"backgroundColor\", highlightColor), _defineProperty(_ref4, \"overflow\", 'visible'), _defineProperty(_ref4, \"width\", elementWidth), _defineProperty(_ref4, \"height\", elementHeight), _ref4;\n    };\n\n    _this.renderTouchableHighlightedButton = function () {\n      var TooltipHighlightedButtonStyle = _this.getTooltipHighlightedButtonStyle();\n\n      return React.createElement(TouchableOpacity, {\n        testID: \"tooltipTouchableHighlightedButton\",\n        onPress: function onPress() {\n          return _this.toggleTooltip();\n        },\n        style: TooltipHighlightedButtonStyle,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }\n      }, _this.props.children);\n    };\n\n    _this.renderStaticHighlightedButton = function () {\n      var TooltipHighlightedButtonStyle = _this.getTooltipHighlightedButtonStyle();\n\n      return React.createElement(View, {\n        style: TooltipHighlightedButtonStyle,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }\n      }, _this.props.children);\n    };\n\n    _this.renderHighlightedButton = function () {\n      var closeOnlyOnBackdropPress = _this.props.closeOnlyOnBackdropPress;\n\n      if (closeOnlyOnBackdropPress) {\n        return _this.renderTouchableHighlightedButton();\n      } else {\n        return _this.renderStaticHighlightedButton();\n      }\n    };\n\n    _this.renderContent = function (withTooltip) {\n      var _this$props3 = _this.props,\n          popover = _this$props3.popover,\n          withPointer = _this$props3.withPointer,\n          toggleOnPress = _this$props3.toggleOnPress,\n          toggleAction = _this$props3.toggleAction;\n\n      if (!withTooltip) {\n        return _this.wrapWithPress(toggleOnPress, toggleAction, _this.props.children);\n      }\n\n      var tooltipStyle = _this.getTooltipStyle();\n\n      return React.createElement(View, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }\n      }, _this.renderHighlightedButton(), withPointer && _this.renderPointer(tooltipStyle.top), React.createElement(View, {\n        style: tooltipStyle,\n        testID: \"tooltipPopoverContainer\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }\n      }, popover));\n    };\n\n    _this.getElementPosition = function () {\n      var skipAndroidStatusBar = _this.props.skipAndroidStatusBar;\n      _this.renderedElement && _this.renderedElement.measure(function (frameOffsetX, frameOffsetY, width, height, pageOffsetX, pageOffsetY) {\n        _this._isMounted && _this.setState({\n          xOffset: pageOffsetX,\n          yOffset: isIOS || skipAndroidStatusBar ? pageOffsetY : pageOffsetY - StatusBar.currentHeight,\n          elementWidth: width,\n          elementHeight: height\n        });\n      });\n    };\n\n    _this.renderStaticModalContent = function () {\n      var _this$props4 = _this.props,\n          withOverlay = _this$props4.withOverlay,\n          overlayColor = _this$props4.overlayColor;\n      return React.createElement(Fragment, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }\n      }, React.createElement(TouchableOpacity, {\n        style: _this.containerStyle(withOverlay, overlayColor),\n        onPress: _this.toggleTooltip,\n        activeOpacity: 1,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 9\n        }\n      }), React.createElement(View, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 9\n        }\n      }, _this.renderContent(true)));\n    };\n\n    _this.renderTogglingModalContent = function () {\n      var _this$props5 = _this.props,\n          withOverlay = _this$props5.withOverlay,\n          overlayColor = _this$props5.overlayColor;\n      return React.createElement(TouchableOpacity, {\n        style: _this.containerStyle(withOverlay, overlayColor),\n        onPress: _this.toggleTooltip,\n        activeOpacity: 1,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }\n      }, _this.renderContent(true));\n    };\n\n    _this.renderModalContent = function () {\n      var closeOnlyOnBackdropPress = _this.props.closeOnlyOnBackdropPress;\n\n      if (closeOnlyOnBackdropPress) {\n        return _this.renderStaticModalContent();\n      } else {\n        return _this.renderTogglingModalContent();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Tooltip, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._isMounted = true;\n      requestAnimationFrame(this.getElementPosition);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var isVisible = this.state.isVisible;\n      var _this$props6 = this.props,\n          onOpen = _this$props6.onOpen,\n          ModalComponent = _this$props6.ModalComponent;\n      return React.createElement(View, {\n        collapsable: false,\n        ref: function ref(e) {\n          _this2.renderedElement = e;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 17\n        }\n      }, this.renderContent(false), React.createElement(ModalComponent, {\n        animationType: \"fade\",\n        visible: isVisible,\n        transparent: true,\n        onShow: onOpen,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 9\n        }\n      }, this.renderModalContent()));\n    }\n  }]);\n\n  return Tooltip;\n}(React.Component);\n\nTooltip.defaultProps = defaultProps;\nexport { Tooltip };\nexport default withTheme(Tooltip, 'Tooltip');","map":{"version":3,"sources":["/Users/naomiperez/Documents/GitHub/80/client/80hd/node_modules/react-native-elements/dist/tooltip/Tooltip.js"],"names":["React","Fragment","withTheme","ScreenWidth","ScreenHeight","isIOS","Triangle","getTooltipCoordinate","getElementVisibleWidth","defaultProps","withOverlay","overlayColor","highlightColor","withPointer","toggleOnPress","toggleAction","height","width","containerStyle","backgroundColor","onClose","onOpen","skipAndroidStatusBar","ModalComponent","Modal","closeOnlyOnBackdropPress","Tooltip","arguments","_isMounted","state","isVisible","yOffset","xOffset","elementWidth","elementHeight","toggleTooltip","props","getElementPosition","setState","prevState","wrapWithPress","children","flex","getTooltipStyle","x","y","StyleSheet","flatten","position","I18nManager","isRTL","renderPointer","tooltipY","pointerColor","pastMiddleLine","top","borderBottomColor","getTooltipHighlightedButtonStyle","renderTouchableHighlightedButton","TooltipHighlightedButtonStyle","renderStaticHighlightedButton","renderHighlightedButton","renderContent","withTooltip","popover","tooltipStyle","renderedElement","measure","frameOffsetX","frameOffsetY","pageOffsetX","pageOffsetY","StatusBar","currentHeight","renderStaticModalContent","renderTogglingModalContent","renderModalContent","requestAnimationFrame","e","Component"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { TouchableOpacity, Modal, View, StatusBar, I18nManager, StyleSheet, } from 'react-native';\nimport { withTheme } from '../config';\nimport { ScreenWidth, ScreenHeight, isIOS } from '../helpers';\nimport Triangle from './Triangle';\nimport getTooltipCoordinate, { getElementVisibleWidth, } from './getTooltipCoordinate';\nconst defaultProps = {\n    withOverlay: true,\n    overlayColor: 'rgba(250, 250, 250, 0.70)',\n    highlightColor: 'transparent',\n    withPointer: true,\n    toggleOnPress: true,\n    toggleAction: 'onPress',\n    height: 40,\n    width: 150,\n    containerStyle: {},\n    backgroundColor: '#617080',\n    onClose: () => { },\n    onOpen: () => { },\n    skipAndroidStatusBar: false,\n    ModalComponent: Modal,\n    closeOnlyOnBackdropPress: false,\n};\nclass Tooltip extends React.Component {\n    constructor() {\n        super(...arguments);\n        this._isMounted = false;\n        this.state = {\n            isVisible: false,\n            yOffset: 0,\n            xOffset: 0,\n            elementWidth: 0,\n            elementHeight: 0,\n        };\n        this.toggleTooltip = () => {\n            const { onClose } = this.props;\n            this.getElementPosition();\n            this._isMounted &&\n                this.setState((prevState) => {\n                    if (prevState.isVisible) {\n                        onClose && onClose();\n                    }\n                    return { isVisible: !prevState.isVisible };\n                });\n        };\n        this.wrapWithPress = (toggleOnPress, toggleAction, children) => {\n            if (toggleOnPress) {\n                return (<TouchableOpacity {...{ [toggleAction]: this.toggleTooltip }} delayLongPress={250} activeOpacity={1}>\n          {children}\n        </TouchableOpacity>);\n            }\n            return children;\n        };\n        this.containerStyle = (withOverlay, overlayColor) => {\n            return {\n                backgroundColor: withOverlay ? overlayColor : 'transparent',\n                flex: 1,\n            };\n        };\n        this.getTooltipStyle = () => {\n            const { yOffset, xOffset, elementHeight, elementWidth } = this.state;\n            const { height, backgroundColor, width, withPointer, containerStyle, } = this.props;\n            const { x, y } = getTooltipCoordinate(xOffset, yOffset, elementWidth, elementHeight, ScreenWidth, ScreenHeight, width, height, withPointer);\n            return StyleSheet.flatten([\n                {\n                    position: 'absolute',\n                    [I18nManager.isRTL ? 'right' : 'left']: x,\n                    top: y,\n                    width,\n                    height,\n                    backgroundColor,\n                    // default styles\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    flex: 1,\n                    borderRadius: 10,\n                    padding: 10,\n                },\n                containerStyle,\n            ]);\n        };\n        this.renderPointer = (tooltipY) => {\n            const { yOffset, xOffset, elementHeight, elementWidth } = this.state;\n            const { backgroundColor, pointerColor } = this.props;\n            const pastMiddleLine = yOffset > tooltipY;\n            return (<View style={{\n                    position: 'absolute',\n                    top: pastMiddleLine ? yOffset - 13 : yOffset + elementHeight - 2,\n                    [I18nManager.isRTL ? 'right' : 'left']: xOffset +\n                        getElementVisibleWidth(elementWidth, xOffset, ScreenWidth) / 2 -\n                        7.5,\n                }}>\n        <Triangle style={{ borderBottomColor: pointerColor || backgroundColor }} isDown={pastMiddleLine}/>\n      </View>);\n        };\n        this.getTooltipHighlightedButtonStyle = () => {\n            const { highlightColor } = this.props;\n            const { yOffset, xOffset, elementWidth, elementHeight } = this.state;\n            return {\n                position: 'absolute',\n                top: yOffset,\n                [I18nManager.isRTL ? 'right' : 'left']: xOffset,\n                backgroundColor: highlightColor,\n                overflow: 'visible',\n                width: elementWidth,\n                height: elementHeight,\n            };\n        };\n        this.renderTouchableHighlightedButton = () => {\n            const TooltipHighlightedButtonStyle = this.getTooltipHighlightedButtonStyle();\n            return (<TouchableOpacity testID=\"tooltipTouchableHighlightedButton\" onPress={() => this.toggleTooltip()} style={TooltipHighlightedButtonStyle}>\n        {this.props.children}\n      </TouchableOpacity>);\n        };\n        this.renderStaticHighlightedButton = () => {\n            const TooltipHighlightedButtonStyle = this.getTooltipHighlightedButtonStyle();\n            return (<View style={TooltipHighlightedButtonStyle}>{this.props.children}</View>);\n        };\n        this.renderHighlightedButton = () => {\n            const { closeOnlyOnBackdropPress } = this.props;\n            if (closeOnlyOnBackdropPress) {\n                return this.renderTouchableHighlightedButton();\n            }\n            else {\n                return this.renderStaticHighlightedButton();\n            }\n        };\n        this.renderContent = (withTooltip) => {\n            const { popover, withPointer, toggleOnPress, toggleAction } = this.props;\n            if (!withTooltip) {\n                return this.wrapWithPress(toggleOnPress, toggleAction, this.props.children);\n            }\n            const tooltipStyle = this.getTooltipStyle();\n            return (<View>\n        {this.renderHighlightedButton()}\n        {withPointer && this.renderPointer(tooltipStyle.top)}\n        <View style={tooltipStyle} testID=\"tooltipPopoverContainer\">\n          {popover}\n        </View>\n      </View>);\n        };\n        this.getElementPosition = () => {\n            const { skipAndroidStatusBar } = this.props;\n            this.renderedElement &&\n                this.renderedElement.measure((frameOffsetX, frameOffsetY, width, height, pageOffsetX, pageOffsetY) => {\n                    this._isMounted &&\n                        this.setState({\n                            xOffset: pageOffsetX,\n                            yOffset: isIOS || skipAndroidStatusBar\n                                ? pageOffsetY\n                                : pageOffsetY - StatusBar.currentHeight,\n                            elementWidth: width,\n                            elementHeight: height,\n                        });\n                });\n        };\n        this.renderStaticModalContent = () => {\n            const { withOverlay, overlayColor } = this.props;\n            return (<Fragment>\n        <TouchableOpacity style={this.containerStyle(withOverlay, overlayColor)} onPress={this.toggleTooltip} activeOpacity={1}/>\n        <View>{this.renderContent(true)}</View>\n      </Fragment>);\n        };\n        this.renderTogglingModalContent = () => {\n            const { withOverlay, overlayColor } = this.props;\n            return (<TouchableOpacity style={this.containerStyle(withOverlay, overlayColor)} onPress={this.toggleTooltip} activeOpacity={1}>\n        {this.renderContent(true)}\n      </TouchableOpacity>);\n        };\n        this.renderModalContent = () => {\n            const { closeOnlyOnBackdropPress } = this.props;\n            if (closeOnlyOnBackdropPress) {\n                return this.renderStaticModalContent();\n            }\n            else {\n                return this.renderTogglingModalContent();\n            }\n        };\n    }\n    componentDidMount() {\n        this._isMounted = true;\n        // wait to compute onLayout values.\n        requestAnimationFrame(this.getElementPosition);\n    }\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n    render() {\n        const { isVisible } = this.state;\n        const { onOpen, ModalComponent } = this.props;\n        return (<View collapsable={false} ref={(e) => {\n                this.renderedElement = e;\n            }}>\n        {this.renderContent(false)}\n        <ModalComponent animationType=\"fade\" visible={isVisible} transparent onShow={onOpen}>\n          {this.renderModalContent()}\n        </ModalComponent>\n      </View>);\n    }\n}\nTooltip.defaultProps = defaultProps;\nexport { Tooltip };\nexport default withTheme(Tooltip, 'Tooltip');\n"]},"metadata":{},"sourceType":"module"}