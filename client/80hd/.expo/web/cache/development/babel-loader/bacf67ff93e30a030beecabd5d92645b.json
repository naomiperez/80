{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { Base64, isString } from '@react-native-firebase/app/lib/common';\n\nvar FirestoreBlob = function () {\n  function FirestoreBlob() {\n    var internal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var binaryString = arguments.length > 1 ? arguments[1] : undefined;\n\n    _classCallCheck(this, FirestoreBlob);\n\n    if (internal === false) {\n      throw new Error('firebase.firestore.Blob constructor is private, use Blob.<field>() instead.');\n    }\n\n    this._binaryString = binaryString;\n  }\n\n  _createClass(FirestoreBlob, [{\n    key: \"isEqual\",\n    value: function isEqual(blob) {\n      if (!(blob instanceof FirestoreBlob)) {\n        throw new Error('firestore.Blob.isEqual expects an instance of Blob');\n      }\n\n      return this._binaryString === blob._binaryString;\n    }\n  }, {\n    key: \"toBase64\",\n    value: function toBase64() {\n      return Base64.btoa(this._binaryString);\n    }\n  }, {\n    key: \"toUint8Array\",\n    value: function toUint8Array() {\n      return new Uint8Array(this._binaryString.split('').map(function (c) {\n        return c.charCodeAt(0);\n      }));\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"firestore.Blob(base64: \" + this.toBase64() + \")\";\n    }\n  }], [{\n    key: \"fromBase64String\",\n    value: function fromBase64String(base64) {\n      if (!isString(base64) || base64.length < 1) {\n        throw new Error('firestore.Blob.fromBase64String expects a string of at least 1 character in length');\n      }\n\n      return new FirestoreBlob(true, Base64.atob(base64));\n    }\n  }, {\n    key: \"fromUint8Array\",\n    value: function fromUint8Array(array) {\n      if (!(array instanceof Uint8Array)) {\n        throw new Error('firestore.Blob.fromUint8Array expects an instance of Uint8Array');\n      }\n\n      return new FirestoreBlob(true, Array.prototype.map.call(array, function ($) {\n        return String.fromCharCode($);\n      }).join(''));\n    }\n  }]);\n\n  return FirestoreBlob;\n}();\n\nexport { FirestoreBlob as default };","map":{"version":3,"sources":["/Users/naomiperez/Documents/GitHub/80/client/80hd/node_modules/@react-native-firebase/firestore/lib/FirestoreBlob.js"],"names":["Base64","isString","FirestoreBlob","internal","binaryString","Error","_binaryString","blob","btoa","Uint8Array","split","map","c","charCodeAt","toBase64","base64","length","atob","array","Array","prototype","call","$","String","fromCharCode","join"],"mappings":";;AAiBA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,uCAAjC;;IAEqBC,a;AACnB,2BAA4C;AAAA,QAAhCC,QAAgC,uEAArB,KAAqB;AAAA,QAAdC,YAAc;;AAAA;;AAC1C,QAAID,QAAQ,KAAK,KAAjB,EAAwB;AACtB,YAAM,IAAIE,KAAJ,CACJ,6EADI,CAAN;AAGD;;AAED,SAAKC,aAAL,GAAqBF,YAArB;AACD;;;;WAyCD,iBAAQG,IAAR,EAAc;AACZ,UAAI,EAAEA,IAAI,YAAYL,aAAlB,CAAJ,EAAsC;AACpC,cAAM,IAAIG,KAAJ,CAAU,oDAAV,CAAN;AACD;;AAED,aAAO,KAAKC,aAAL,KAAuBC,IAAI,CAACD,aAAnC;AACD;;;WAQD,oBAAW;AACT,aAAON,MAAM,CAACQ,IAAP,CAAY,KAAKF,aAAjB,CAAP;AACD;;;WAQD,wBAAe;AACb,aAAO,IAAIG,UAAJ,CAAe,KAAKH,aAAL,CAAmBI,KAAnB,CAAyB,EAAzB,EAA6BC,GAA7B,CAAiC,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,UAAF,CAAa,CAAb,CAAJ;AAAA,OAAlC,CAAf,CAAP;AACD;;;WAQD,oBAAW;AACT,yCAAiC,KAAKC,QAAL,EAAjC;AACD;;;WArED,0BAAwBC,MAAxB,EAAgC;AAC9B,UAAI,CAACd,QAAQ,CAACc,MAAD,CAAT,IAAqBA,MAAM,CAACC,MAAP,GAAgB,CAAzC,EAA4C;AAC1C,cAAM,IAAIX,KAAJ,CACJ,oFADI,CAAN;AAGD;;AAED,aAAO,IAAIH,aAAJ,CAAkB,IAAlB,EAAwBF,MAAM,CAACiB,IAAP,CAAYF,MAAZ,CAAxB,CAAP;AACD;;;WAQD,wBAAsBG,KAAtB,EAA6B;AAC3B,UAAI,EAAEA,KAAK,YAAYT,UAAnB,CAAJ,EAAoC;AAClC,cAAM,IAAIJ,KAAJ,CAAU,iEAAV,CAAN;AACD;;AAED,aAAO,IAAIH,aAAJ,CACL,IADK,EAELiB,KAAK,CAACC,SAAN,CAAgBT,GAAhB,CAAoBU,IAApB,CAAyBH,KAAzB,EAAgC,UAAAI,CAAC;AAAA,eAAIC,MAAM,CAACC,YAAP,CAAoBF,CAApB,CAAJ;AAAA,OAAjC,EAA6DG,IAA7D,CAAkE,EAAlE,CAFK,CAAP;AAID;;;;;;SA1CkBvB,a","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Base64, isString } from '@react-native-firebase/app/lib/common';\n\nexport default class FirestoreBlob {\n  constructor(internal = false, binaryString) {\n    if (internal === false) {\n      throw new Error(\n        'firebase.firestore.Blob constructor is private, use Blob.<field>() instead.',\n      );\n    }\n\n    this._binaryString = binaryString;\n  }\n\n  /**\n   * Creates a new Blob from the given Base64 string\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#.fromBase64String\n   * @param base64 string\n   */\n  static fromBase64String(base64) {\n    if (!isString(base64) || base64.length < 1) {\n      throw new Error(\n        'firestore.Blob.fromBase64String expects a string of at least 1 character in length',\n      );\n    }\n\n    return new FirestoreBlob(true, Base64.atob(base64));\n  }\n\n  /**\n   * Creates a new Blob from the given Uint8Array.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#.fromUint8Array\n   * @param array Array\n   */\n  static fromUint8Array(array) {\n    if (!(array instanceof Uint8Array)) {\n      throw new Error('firestore.Blob.fromUint8Array expects an instance of Uint8Array');\n    }\n\n    return new FirestoreBlob(\n      true,\n      Array.prototype.map.call(array, $ => String.fromCharCode($)).join(''),\n    );\n  }\n\n  /**\n   * Returns 'true' if this Blob is equal to the provided one.\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#isEqual\n   * @param {*} blob Blob The Blob to compare against. Value must not be null.\n   * @returns boolean 'true' if this Blob is equal to the provided one.\n   */\n  isEqual(blob) {\n    if (!(blob instanceof FirestoreBlob)) {\n      throw new Error('firestore.Blob.isEqual expects an instance of Blob');\n    }\n\n    return this._binaryString === blob._binaryString;\n  }\n\n  /**\n   * Returns the bytes of a Blob as a Base64-encoded string.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#toBase64\n   * @returns string The Base64-encoded string created from the Blob object.\n   */\n  toBase64() {\n    return Base64.btoa(this._binaryString);\n  }\n\n  /**\n   * Returns the bytes of a Blob in a new Uint8Array.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#toUint8Array\n   * @returns non-null Uint8Array The Uint8Array created from the Blob object.\n   */\n  toUint8Array() {\n    return new Uint8Array(this._binaryString.split('').map(c => c.charCodeAt(0)));\n  }\n\n  /**\n   * Returns a string representation of this blob instance\n   *\n   * @returns {string}\n   * @memberof Blob\n   */\n  toString() {\n    return `firestore.Blob(base64: ${this.toBase64()})`;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}