{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/naomiperez/Documents/GitHub/80/client/80hd/src/containers/Home.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Calendar from \"../modules/calendar/Calendar\";\nimport Mood from \"./MoodSelector/Mood\";\nimport Theme from \"../styles/colors\";\nimport LoggerView from \"../components/LoggerView\";\nimport firebase from \"firebase/app\";\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport { userContext } from \"../components/UserContext\";\nvar today = new Date();\nvar moodInit = 10;\n\nfunction Home(props) {\n  var _useState = useState(moodInit),\n      _useState2 = _slicedToArray(_useState, 2),\n      mood = _useState2[0],\n      setMood = _useState2[1];\n\n  var _useState3 = useState(today),\n      _useState4 = _slicedToArray(_useState3, 2),\n      date = _useState4[0],\n      setDate = _useState4[1];\n\n  var _React$useContext = React.useContext(Context),\n      user = _React$useContext.user;\n\n  var userRef = user.value;\n  console.log(userRef);\n\n  function getTodayLog() {\n    var db, todayRef;\n    return _regeneratorRuntime.async(function getTodayLog$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            db = firebase.firestore();\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(db.collection('moodLog').where(\"timestamp\", \"==\", date).get().then(function (querySnapshot) {\n              if (querySnapshot.docs.length === 0) {\n                console.log(\"No Documents from today\");\n                return undefined;\n              } else if (querySnapshot.docs.length > 1) {\n                console.log(\"More than one document from today\");\n              }\n\n              return querySnapshot.docs[0];\n            }).catch(function (error) {\n              console.log(\"Error getting documents: \", error);\n            }));\n\n          case 3:\n            todayRef = _context.sent;\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function logMood(mood) {\n    console.log(\"Mood: \" + mood + \" Date: \" + date);\n    setMood(mood);\n    var data = formatLogData();\n    getTodayLog().then(function (todayRef) {\n      if (todayRef) {\n        todayRef.ref.update(data).then(function () {\n          console.log(\"Document successfully updated\");\n        }).catch(function (error) {\n          console.error(\"Error updating document: \", error);\n        });\n      } else {\n        firebase.firestore().collection('moodLog').doc().set(data);\n      }\n    });\n  }\n\n  function formatLogData() {\n    var day = date.getDay();\n    var formattedDate = date.getFullYear().toString() + '-' + date.getMonth().toString() + '-' + date.getDate().toString();\n\n    if (userRef) {\n      console.log(\"userRef: \" + userRef);\n      var data = {\n        date: formattedDate,\n        mood: mood,\n        weekday: day,\n        user: userRef\n      };\n      return data;\n    } else {\n      var _user = props.user;\n      console.log(\"user: \" + _user);\n      var _data = {\n        date: formattedDate,\n        mood: mood,\n        weekday: day,\n        user: _user\n      };\n      return _data;\n    }\n  }\n\n  function logDate(obj) {\n    console.log(obj.date);\n    setDate(obj.date);\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, React.createElement(Calendar, {\n    date: date,\n    logDate: logDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }), React.createElement(LoggerView, {\n    selector: React.createElement(Mood, {\n      mood: mood,\n      logMood: logMood,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 35\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Theme.cream\n  }\n});\nexport default Home;","map":{"version":3,"sources":["/Users/naomiperez/Documents/GitHub/80/client/80hd/src/containers/Home.js"],"names":["React","useState","Calendar","Mood","Theme","LoggerView","firebase","userContext","today","Date","moodInit","Home","props","mood","setMood","date","setDate","useContext","Context","user","userRef","value","console","log","getTodayLog","db","firestore","collection","where","get","then","querySnapshot","docs","length","undefined","catch","error","todayRef","logMood","data","formatLogData","ref","update","doc","set","day","getDay","formattedDate","getFullYear","toString","getMonth","getDate","weekday","logDate","obj","styles","container","StyleSheet","create","flex","backgroundColor","cream"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport Calendar from '../modules/calendar/Calendar'\nimport Mood from './MoodSelector/Mood'\nimport Theme from '../styles/colors'\nimport LoggerView from '../components/LoggerView'\nimport firebase from \"firebase/app\"\nimport 'firebase/firestore'\nimport 'firebase/auth'\nimport {userContext} from '../components/UserContext'\n\nconst today = new Date();\nconst moodInit = 10;\n\nfunction Home(props) {\n    // Use state variables to store date and mood\n    const [mood, setMood] = useState(moodInit)\n    const [date, setDate] = useState(today)\n\n    const { user } = React.useContext(Context)\n    const userRef = user.value\n    console.log(userRef)\n\n    async function getTodayLog() {\n        const db = firebase.firestore()\n\n        // If user has already logged something today, then get the document\n        // with today's date from the 'moodLog' Firestore collection\n\n        const todayRef = await db.collection('moodLog').where(\"timestamp\", \"==\", date).get()\n            .then(querySnapshot => {\n                if (querySnapshot.docs.length === 0) {\n                    console.log(\"No Documents from today\")\n                    return undefined\n                } else if (querySnapshot.docs.length > 1) {\n                    console.log(\"More than one document from today\")\n                }\n\n                return querySnapshot.docs[0]\n                //  id & data properties\n            })\n            .catch((error) => {\n                console.log(\"Error getting documents: \", error);\n            });\n\n    }\n\n    /********************/\n    function logMood(mood) {\n        console.log(`Mood: ${mood} Date: ${date}`)\n\n        setMood(mood)\n\n        /* If user already has logged data for today, then update() \n            if not, then add() new document for today\n        */\n        let data = formatLogData()\n\n        //    if (props.user) {}\n        getTodayLog().then((todayRef) => {\n            if (todayRef) {\n                todayRef.ref.update(data)\n                    .then(() => {\n                        console.log(\"Document successfully updated\");\n                    }).catch((error) => {\n                        // The document probably doesn't exist.\n                        console.error(\"Error updating document: \", error);\n                    });\n            } else {\n                // New doc for 'today''s date\n                firebase.firestore().collection('moodLog').doc().set(data)\n            }\n        })\n    }\n\n    function formatLogData() {\n        /* Format date to pass to document.add() */\n        let day = date.getDay()\n        const formattedDate = date.getFullYear().toString() + '-' + date.getMonth().toString() + '-' + date.getDate().toString()\n        /* Check if this component was returned by Registration/Login or App.js */\n        if (userRef) {\n            console.log(\"userRef: \" + userRef)\n            // Create new data for day and add it as a document\n            let data = {\n                date: formattedDate,\n                mood: mood,\n                weekday: day,\n                user: userRef\n            }\n            return data\n        } else {\n            let user = props.user\n            console.log(\"user: \" + user)\n            let data = {\n                date: formattedDate,\n                mood: mood,\n                weekday: day,\n                user: user\n            }\n            return data\n        }\n    }\n\n    function logDate(obj) {\n        console.log(obj.date)\n        setDate(obj.date)\n    }\n\n    return (\n\n        <View style={styles.container}>\n            {/* import the context and pass along the data */}\n            <Calendar date={date} logDate={logDate} />\n            <LoggerView selector={<Mood mood={mood} logMood={logMood} />} />\n        </View>\n    );\n}\n\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: Theme.cream\n    }\n});\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}