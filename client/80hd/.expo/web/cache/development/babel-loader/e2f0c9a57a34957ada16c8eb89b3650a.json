{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/naomiperez/Documents/GitHub/80/client/80hd/App.js\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport OnboardingSwiper from \"./src/components/OnboardingSwiper\";\nvar Stack = createStackNavigator();\n\nfunction App() {\n  var _this = this;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      user = _useState4[0],\n      setUser = _useState4[1];\n\n  if (loading) {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 7\n      }\n    }, \"loading\");\n  }\n\n  useEffect(function () {\n    var usersRef = firebase.firestore().collection('users');\n    firebase.auth().onAuthStateChanged(function (user) {\n      if (user) {\n        usersRef.doc(user.uid).get().then(function (document) {\n          var userData = document.data();\n          setLoading(false);\n          setUser(userData);\n        }).catch(function (error) {\n          console.log(\"Error: \" + error);\n          setLoading(false);\n        });\n      } else {\n        setLoading(true);\n      }\n    });\n  }, []);\n  return React.createElement(NavigationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, React.createElement(Stack.Navigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, user ? React.createElement(Stack.Screen, {\n    name: \"Home\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, function (props) {\n    return React.createElement(HomeScreen, _extends({}, props, {\n      extraData: user,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 23\n      }\n    }));\n  }) : React.createElement(React.Fragment, null, React.createElement(Stack.Screen, {\n    name: \"Onboarding\",\n    component: OnboardingSwiper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Login\",\n    component: LoginScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Registration\",\n    component: RegistrationScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/naomiperez/Documents/GitHub/80/client/80hd/App.js"],"names":["React","useState","NavigationContainer","createStackNavigator","OnboardingSwiper","Stack","App","loading","setLoading","user","setUser","useEffect","usersRef","firebase","firestore","collection","auth","onAuthStateChanged","doc","uid","get","then","document","userData","data","catch","error","console","log","props","LoginScreen","RegistrationScreen"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,OAAOC,gBAAP;AAGA,IAAMC,KAAK,GAAGF,oBAAoB,EAAlC;;AAGA,SAASG,GAAT,GAAe;AAAA;;AACb,kBAA8BL,QAAQ,CAAC,IAAD,CAAtC;AAAA;AAAA,MAAOM,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAAwBP,QAAQ,CAAC,IAAD,CAAhC;AAAA;AAAA,MAAOQ,IAAP;AAAA,MAAaC,OAAb;;AAEA,MAAIH,OAAJ,EAAa;AACX,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF;AAKD;;AAEDI,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMC,QAAQ,GAAGC,QAAQ,CAACC,SAAT,GAAqBC,UAArB,CAAgC,OAAhC,CAAjB;AAEAF,IAAAA,QAAQ,CAACG,IAAT,GAAgBC,kBAAhB,CAAmC,UAAAR,IAAI,EAAI;AACzC,UAAIA,IAAJ,EAAU;AAGRG,QAAAA,QAAQ,CACLM,GADH,CACOT,IAAI,CAACU,GADZ,EAEGC,GAFH,GAGGC,IAHH,CAGQ,UAACC,QAAD,EAAc;AAClB,cAAMC,QAAQ,GAAGD,QAAQ,CAACE,IAAT,EAAjB;AACAhB,UAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,UAAAA,OAAO,CAACa,QAAD,CAAP;AACD,SAPH,EAQGE,KARH,CAQS,UAACC,KAAD,EAAW;AAChBC,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAYF,KAAxB;AACAlB,UAAAA,UAAU,CAAC,KAAD,CAAV;AACD,SAXH;AAYD,OAfD,MAeO;AACLA,QAAAA,UAAU,CAAC,IAAD,CAAV;AACD;AACF,KAnBD;AAoBD,GAvBQ,EAuBN,EAvBM,CAAT;AA0BA,SACE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD,CAAO,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEC,IAAI,GACF,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,UAAAoB,KAAK;AAAA,WAAI,oBAAC,UAAD,eAAgBA,KAAhB;AAAuB,MAAA,SAAS,EAAEpB,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAJ;AAAA,GADR,CADE,GAKF,0CACE,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,YAAnB;AAAgC,IAAA,SAAS,EAAEL,gBAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,OAAnB;AAA2B,IAAA,SAAS,EAAE0B,WAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,cAAnB;AAAkC,IAAA,SAAS,EAAEC,kBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CANJ,CADF,CADF;AAiBD;;AAED,eAAezB,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Text } from \"react-native\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport OnboardingSwiper from './src/components/OnboardingSwiper'\n// import { firebase } from './src/firebase/config'\n\nconst Stack = createStackNavigator();\n\n// Use Stack Navigator to navigate to various pages in app\nfunction App() {\n  const [loading, setLoading] = useState(true)\n  const [user, setUser] = useState(null)\n\n  if (loading) {\t\n    return (\t\n      <Text>\n        loading\n        </Text> \n    )\t\n  }\n\n  useEffect(() => {\n    const usersRef = firebase.firestore().collection('users');\n    // returns the currently logged in user\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        // fetch all the extra user data that we stored in Firestore\n        // and set it on the current componentâ€™s state\n        usersRef\n          .doc(user.uid)\n          .get()\n          .then((document) => {\n            const userData = document.data()\n            setLoading(false)\n            setUser(userData)\n          })\n          .catch((error) => {\n            console.log(\"Error: \" + error)\n            setLoading(false)\n          });\n      } else {\n        setLoading(true)\n      }\n    });\n  }, []);\n\n  /* If returning user, open Home. Else, open onboarding & Login screen */\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n      { user ? (\n          <Stack.Screen name=\"Home\">\n            {props => <HomeScreen {...props} extraData={user} />}\n          </Stack.Screen>\n        ) : (\n          <>\n            <Stack.Screen name=\"Onboarding\" component={OnboardingSwiper} />\n            <Stack.Screen name=\"Login\" component={LoginScreen} />\n            <Stack.Screen name=\"Registration\" component={RegistrationScreen} />\n          </>\n        )}\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}